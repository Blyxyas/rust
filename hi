Building stage0 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)
Creating a sysroot for stage1 compiler (use `rustup toolchain link 'name' build/host/stage1`)
Building stage1 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage1 -> stage2, x86_64-unknown-linux-gnu)
Building tool clippy-driver (stage1 -> stage2, x86_64-unknown-linux-gnu)
Building tool rustdoc (stage0 -> stage1, x86_64-unknown-linux-gnu)
Testing clippy (stage1 -> stage2, x86_64-unknown-linux-gnu)

running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


FAILED TEST: tests/ui/exit2.rs
command: CLIPPY_CONF_DIR="tests" "/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/clippy-driver" "--error-format=json" "--emit=metadata" "-Aunused" "-Ainternal_features" "-Zui-testing" "-Dwarnings" "-Ldependency=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps" "--extern=clippy_config=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_config-3dff275acfe3c0a6.rlib" "--extern=clippy_lints=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-3506e4e31587f3d1.rlib" "--extern=clippy_utils=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_utils-1da44b681c1dff3d.rlib" "--extern=futures=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libfutures-7a135a25a60ce3a3.rlib" "--extern=if_chain=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libif_chain-680a998fcd61bad7.rlib" "--extern=itertools=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-4bfd3bb4194633a9.rlib" "--extern=parking_lot=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libparking_lot-ed7ef418b9db0dd9.rlib" "--extern=quote=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libquote-d142ba596d59ec92.rlib" "--extern=regex=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libregex-976b15a69c92de12.rlib" "--extern=serde=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libserde-b55c19280fc89325.rlib" "--extern=serde_derive=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/deps/libserde_derive-b0f0f6ba21adc31e.so" "--extern=syn=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-0ffcf99b7fbc029c.rlib" "--extern=tokio=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libtokio-3578d5bfd7534b3e.rlib" "-Ldependency=/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/deps" "--out-dir" "/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/ui_test/tests/ui" "tests/ui/exit2.rs" "--edition" "2021"

error: actual output differed from expected
Execute `cargo uibless` to update `tests/ui/exit2.stderr` to the actual output
--- tests/ui/exit2.stderr
+++ <stderr output>
-error: usage of `process::exit`
+[compiler/rustc_lint/src/levels.rs:206] &hashmap = {
-  --> $DIR/exit2.rs:4:5
+    LintId {
-   |
+        lint: Lint {
-LL |     std::process::exit(3);
+            name: "UNUSED_MUT",
-   |     ^^^^^^^^^^^^^^^^^^^^^
+            default_level: Warn,
-   |
+            desc: "detect mut variables which don't need to be mutable",
-   = note: `-D clippy::exit` implied by `-D warnings`
+            edition_lint_opts: None,
-   = help: to override `-D warnings` add `#[allow(clippy::exit)]`
+            report_in_external_macro: false,
-
+            future_incompatible: None,
-error: aborting due to previous error
+            is_loaded: false,
-
+            feature_gate: None,


error: `usage of `process::exit`` not found in diagnostics on line 4
 --> tests/ui/exit2.rs:5:17
  |
5 |     //~^ ERROR: usage of `process::exit`
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
  |

error: ``-D clippy::exit` implied by `-D warnings`` not found in diagnostics on line 4
 --> tests/ui/exit2.rs:6:16
  |
6 |     //~| NOTE: `-D clippy::exit` implied by `-D warnings`
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
  |

full stderr:
[compiler/rustc_lint/src/levels.rs:206] &hashmap = {
    LintId {
        lint: Lint {
            name: "UNUSED_MUT",
            default_level: Warn,
            desc: "detect mut variables which don't need to be mutable",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_CLOSURE",
            default_level: Warn,
            desc: "redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FALLIBLE_CONVERSIONS",
            default_level: Warn,
            desc: "calling the `try_from` and `try_into` trait methods when `From`/`Into` is implemented",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_FEATURES",
            default_level: Warn,
            desc: "unused features found in crate-level `#[feature]` directives",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVE_ORD_XOR_PARTIAL_ORD",
            default_level: Deny,
            desc: "deriving `Ord` but implementing `PartialOrd` explicitly",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_SPIN_LOOP",
            default_level: Warn,
            desc: "An empty busy waiting loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DUPLICATE_UNDERSCORE_ARGUMENT",
            default_level: Warn,
            desc: "function arguments having names which only differ by an underscore",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::QUESTION_MARK",
            default_level: Warn,
            desc: "checks for expressions that could be replaced by the question mark operator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LET_UNDERSCORE_LOCK",
            default_level: Deny,
            desc: "non-binding let on a synchronization lock",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::POSSIBLE_MISSING_COMMA",
            default_level: Deny,
            desc: "possible missing comma in array",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IS_DIGIT_ASCII_RADIX",
            default_level: Warn,
            desc: "use of `char::is_digit(..)` with literal radix of 10 or 16",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNWRAP_OR_DEFAULT",
            default_level: Warn,
            desc: "using `.unwrap_or`, etc. with an argument that constructs a default value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_CLOSURE_CALL",
            default_level: Warn,
            desc: "throwaway closures called in the expression they are defined",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ELIDED_LIFETIMES_IN_ASSOCIATED_CONSTANT",
            default_level: Warn,
            desc: "elided lifetimes cannot be used in associated constants in impls",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #115010 <https://github.com/rust-lang/rust/issues/115010>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_COMPARISONS",
            default_level: Warn,
            desc: "unnecessary double comparisons that can be simplified",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RANGE_CONTAINS",
            default_level: Warn,
            desc: "manually reimplementing {`Range`, `RangeInclusive`}`::contains`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEXT_DIRECTION_CODEPOINT_IN_COMMENT",
            default_level: Deny,
            desc: "invisible directionality-changing codepoints in comment",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_CHAR_PATTERN",
            default_level: Warn,
            desc: "using a single-character str where a char could be used, e.g., `_.split(\"x\")`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_SORT_BY",
            default_level: Warn,
            desc: "Use of `Vec::sort_by` when `Vec::sort_by_key` or `Vec::sort` would be clearer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOOL_COMPARISON",
            default_level: Warn,
            desc: "comparing a variable to a boolean, e.g., `if x == true` or `if x != true`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_ENV_UNWRAP",
            default_level: Deny,
            desc: "using `option_env!(...).unwrap()` to get environment variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SLOW_VECTOR_INITIALIZATION",
            default_level: Warn,
            desc: "slow vector initialization",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_FLOAT_TO_INT",
            default_level: Warn,
            desc: "transmutes from a float to an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNCOMMON_CODEPOINTS",
            default_level: Warn,
            desc: "detects uncommon Unicode codepoints in identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS",
            default_level: Warn,
            desc: "transparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #78586 <https://github.com/rust-lang/rust/issues/78586>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LEN_WITHOUT_IS_EMPTY",
            default_level: Warn,
            desc: "traits or impls with a public `len` method but no corresponding `is_empty` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_LIKE_MATCHES_MACRO",
            default_level: Warn,
            desc: "a match that could be written with the matches! macro",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BAD_ASM_STYLE",
            default_level: Warn,
            desc: "incorrect use of inline assembly",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WAKER_CLONE_WAKE",
            default_level: Warn,
            desc: "cloning a `Waker` only to wake it",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZST_OFFSET",
            default_level: Deny,
            desc: "Check for offset calculations on raw pointers to zero-sized types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNDROPPED_MANUALLY_DROPS",
            default_level: Deny,
            desc: "calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of it's inner value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNSTABLE_NAME_COLLISIONS",
            default_level: Warn,
            desc: "detects name collision with an existing but unstable method",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #48919 <https://github.com/rust-lang/rust/issues/48919>",
                    reason: Custom(
                        "once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!",
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAYBE_MISUSED_CFG",
            default_level: Warn,
            desc: "prevent from misusing the wrong attr name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVED_HASH_WITH_MANUAL_EQ",
            default_level: Deny,
            desc: "deriving `Hash` but implementing `PartialEq` explicitly",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FLATTEN",
            default_level: Warn,
            desc: "for loops over `Option`s or `Result`s with a single expression can be simplified",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_STATIC_LIFETIMES",
            default_level: Warn,
            desc: "Using explicit `'static` lifetime for constants or statics when elision rules would allow omitting them.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_ITEM_MUTATION",
            default_level: Warn,
            desc: "detects attempts to mutate a `const` item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_MUST_USE",
            default_level: Warn,
            desc: "`#[must_use]` attribute on a `#[must_use]`-returning function / method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ERR_EXPECT",
            default_level: Warn,
            desc: "using `.err().expect(\"\")` when `.expect_err(\"\")` can be used",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_OPTION_AS_DEREF",
            default_level: Warn,
            desc: "no-op use of `deref` or `deref_mut` method to `Option`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEG_MULTIPLY",
            default_level: Warn,
            desc: "multiplying integers by `-1`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RC_CLONE_IN_VEC_INIT",
            default_level: Warn,
            desc: "initializing reference-counted pointer in `vec![elem; len]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ENUM_VARIANT_NAMES",
            default_level: Warn,
            desc: "enums where all variants share a prefix/postfix",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROWS_FOR_GENERIC_ARGS",
            default_level: Warn,
            desc: "taking a reference that is going to be automatically dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REVERSED_EMPTY_RANGES",
            default_level: Deny,
            desc: "reversing the limits of range expressions, resulting in empty ranges",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ILL_FORMED_ATTRIBUTE_INPUT",
            default_level: Deny,
            desc: "ill-formed attribute inputs that were previously accepted and used in practice",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #57571 <https://github.com/rust-lang/rust/issues/57571>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::CHAR_LIT_AS_U8",
            default_level: Warn,
            desc: "casting a character literal to `u8` truncates",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TO_STRING_IN_FORMAT_ARGS",
            default_level: Warn,
            desc: "`to_string` applied to a type that implements `Display` in format args",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEW_RET_NO_SELF",
            default_level: Warn,
            desc: "not returning type containing `Self` in a `new` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_HASH",
            default_level: Deny,
            desc: "hashing a unit value, which does nothing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BOOL",
            default_level: Warn,
            desc: "if-statements with plain booleans in the then- and else-clause, e.g., `if p { true } else { false }`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESERVE_AFTER_INITIALIZATION",
            default_level: Warn,
            desc: "`reserve` called immediately after `Vec` creation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_NON_ZERO",
            default_level: Warn,
            desc: "transmutes from an integer to a non-zero wrapper",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_MACRO_EXPORT_ARGUMENTS",
            default_level: Warn,
            desc: "\"invalid_parameter\" isn't a valid argument for `#[macro_export]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DYN_DROP",
            default_level: Warn,
            desc: "trait objects of the form `dyn Drop` are useless",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LEN_ZERO",
            default_level: Warn,
            desc: "checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_PATTERN_MATCHING",
            default_level: Warn,
            desc: "use the proper utility function avoiding an `if let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_UNIT",
            default_level: Warn,
            desc: "needless unit expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEXT_DIRECTION_CODEPOINT_IN_LITERAL",
            default_level: Deny,
            desc: "detect special Unicode codepoints that affect the visual representation of text on screen, changing the direction in which text flows",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "INVALID_DOC_ATTRIBUTES",
            default_level: Warn,
            desc: "detects invalid `#[doc(...)]` attributes",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #82730 <https://github.com/rust-lang/rust/issues/82730>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVABLE_IMPLS",
            default_level: Warn,
            desc: "manual implementation of the `Default` trait which is equal to a derive",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXTRA_UNUSED_TYPE_PARAMETERS",
            default_level: Warn,
            desc: "unused type parameters in function definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SATURATING_ARITHMETIC",
            default_level: Warn,
            desc: "`.checked_add/sub(x).unwrap_or(MAX/MIN)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_AS_STR",
            default_level: Warn,
            desc: "`as_str` used to call a method on `str` that is also available on `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORGETTING_COPY_TYPES",
            default_level: Warn,
            desc: "calls to `std::mem::forget` with a value that implements Copy",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "USELESS_DEPRECATED",
            default_level: Deny,
            desc: "detects deprecation attributes with no effect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NON_MINIMAL_CFG",
            default_level: Warn,
            desc: "ensure that all `cfg(any())` and `cfg(all())` have more than one condition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEFAULT_INSTEAD_OF_ITER_EMPTY",
            default_level: Warn,
            desc: "check `std::iter::Empty::default()` and replace with `std::iter::empty()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_ELEMENT_LOOP",
            default_level: Warn,
            desc: "there is no reason to have a single element loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PERMISSIONS_SET_READONLY_FALSE",
            default_level: Warn,
            desc: "Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUST_USE_UNIT",
            default_level: Warn,
            desc: "`#[must_use]` attribute on a unit-returning function / method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OK_EXPECT",
            default_level: Warn,
            desc: "using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MIN_MAX",
            default_level: Deny,
            desc: "`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::INVALID_NULL_PTR_USAGE",
            default_level: Deny,
            desc: "invalid usage of a null pointer, suggesting `NonNull::dangling()` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNCONDITIONAL_RECURSION",
            default_level: Warn,
            desc: "functions that cannot return without calling themselves",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IMPLICIT_SATURATING_SUB",
            default_level: Warn,
            desc: "Perform saturating subtraction instead of implicitly checking lower bound of data type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MULTI_ASSIGNMENTS",
            default_level: Warn,
            desc: "instead of using `a = b = c;` use `a = c; b = c;`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INEFFECTIVE_BIT_MASK",
            default_level: Deny,
            desc: "expressions where a bit mask will be rendered useless by a comparison, e.g., `(x | 1) > 2`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "STABLE_FEATURES",
            default_level: Warn,
            desc: "stable features found in `#[feature]` directive",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TYPE_ID_ON_BOX",
            default_level: Warn,
            desc: "calling `.type_id()` on `Box<dyn Any>`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DIVERGING_SUB_EXPRESSION",
            default_level: Warn,
            desc: "whether an expression contains a diverging sub expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_LOCALS",
            default_level: Deny,
            desc: "redundant redefinition of a local binding",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_FLOAT",
            default_level: Warn,
            desc: "transmutes from an integer to a float",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ARRAY_INTO_ITER",
            default_level: Warn,
            desc: "detects calling `into_iter` on arrays in Rust 2015 and 2018",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>",
                    reason: EditionSemanticsChange(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DROP_BOUNDS",
            default_level: Warn,
            desc: "bounds of the form `T: Drop` are most likely incorrect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEMPORARY_CSTRING_AS_PTR",
            default_level: Warn,
            desc: "detects getting the inner pointer of a temporary `CString`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FOUR_FORWARD_SLASHES",
            default_level: Warn,
            desc: "comments with 4 forward slashes (`////`) likely intended to be doc comments (`///`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FOR_LOOPS_OVER_FALLIBLES",
            default_level: Warn,
            desc: "for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_AUTO_DEREF",
            default_level: Warn,
            desc: "dereferencing when the compiler would automatically dereference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PATH_ENDS_WITH_EXT",
            default_level: Warn,
            desc: "attempting to compare file extensions using `Path::ends_with`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNINIT_ASSUMED_INIT",
            default_level: Deny,
            desc: "`MaybeUninit::uninit().assume_init()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DROPPING_COPY_TYPES",
            default_level: Warn,
            desc: "calls to `std::mem::drop` with a value that implements Copy",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DUPLICATE_MACRO_ATTRIBUTES",
            default_level: Warn,
            desc: "duplicated attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEFAULT_CONSTRUCTED_UNIT_STRUCTS",
            default_level: Warn,
            desc: "unit structs can be contructed without calling `default`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INIT_NUMBERED_FIELDS",
            default_level: Warn,
            desc: "numbered fields in tuple struct initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SAME_ITEM_PUSH",
            default_level: Warn,
            desc: "the same item is pushed inside of a for loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INVALID_REGEX",
            default_level: Deny,
            desc: "invalid regular expressions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ELLIPSIS_INCLUSIVE_RANGE_PATTERNS",
            default_level: Warn,
            desc: "`...` range patterns are deprecated",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>",
                    reason: EditionError(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNSTABLE_SYNTAX_PRE_EXPANSION",
            default_level: Warn,
            desc: "unstable syntax can change at any point in the future, causing a hard error!",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #65860 <https://github.com/rust-lang/rust/issues/65860>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NOT_UNSAFE_PTR_ARG_DEREF",
            default_level: Deny,
            desc: "public functions dereferencing raw pointer arguments but not marked `unsafe`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RETAIN",
            default_level: Warn,
            desc: "`retain()` is simpler and the same functionalities",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_TO_OWNED",
            default_level: Warn,
            desc: "unnecessary calls to `to_owned`-like functions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRONG_SELF_CONVENTION",
            default_level: Warn,
            desc: "defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUT_FROM_REF",
            default_level: Deny,
            desc: "fns that create mutable refs from immutable ref args",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FROM_OVER_INTO",
            default_level: Warn,
            desc: "Warns on implementations of `Into<..>` to use `From<..>`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BAD_BIT_MASK",
            default_level: Deny,
            desc: "expressions of the form `_ & mask == select` that will only ever return `true` or `false`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "IRREFUTABLE_LET_PATTERNS",
            default_level: Warn,
            desc: "detects irrefutable patterns in `if let` and `while let` statements",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_TO_NUMERIC_CAST_WITH_TRUNCATION",
            default_level: Warn,
            desc: "casting a function pointer to a numeric type not wide enough to store the address",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_FIELD_NAMES",
            default_level: Warn,
            desc: "checks for fields in struct literals where shorthands could be used",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_BOOL",
            default_level: Warn,
            desc: "transmutes from an integer to a `bool`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PATTERNS_IN_FNS_WITHOUT_BODY",
            default_level: Deny,
            desc: "patterns in functions without body were erroneously allowed",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #35203 <https://github.com/rust-lang/rust/issues/35203>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNGATED_ASYNC_FN_TRACK_CALLER",
            default_level: Warn,
            desc: "enabling track_caller on an async fn is a no-op unless the async_fn_track_caller feature is enabled",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_SINGLE_BINDING",
            default_level: Warn,
            desc: "a match with a single binding instead of using `let` statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INVISIBLE_CHARACTERS",
            default_level: Deny,
            desc: "using an invisible character in a string literal, which is confusing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNREACHABLE_CODE",
            default_level: Warn,
            desc: "detects unreachable code paths",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ENUM_INTRINSICS_NON_ENUMS",
            default_level: Deny,
            desc: "detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ITER_OUT_OF_BOUNDS",
            default_level: Warn,
            desc: "calls to `.take()` or `.skip()` that are out of bounds",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_MAP",
            default_level: Warn,
            desc: "suspicious usage of map",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORGETTING_REFERENCES",
            default_level: Warn,
            desc: "calls to `std::mem::forget` with a reference instead of an owned value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONFLICTING_REPR_HINTS",
            default_level: Deny,
            desc: "conflicts between `#[repr(..)]` hints that were previously accepted and used in practice",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #68585 <https://github.com/rust-lang/rust/issues/68585>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_IMMUTABLE_CONDITION",
            default_level: Deny,
            desc: "variables used within while expression are not mutated in the body",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::JUST_UNDERSCORES_AND_DIGITS",
            default_level: Warn,
            desc: "unclear name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_RANGE_IN_VEC_INIT",
            default_level: Warn,
            desc: "checks for initialization of `Vec` or arrays which consist of a single range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PRIVATE_INTERFACES",
            default_level: Warn,
            desc: "private type in primary interface of an item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TRIVIAL_BOUNDS",
            default_level: Warn,
            desc: "these bounds don't depend on an type parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_SPLITN",
            default_level: Warn,
            desc: "usages of `str::splitn` that can be replaced with `str::split`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SHOULD_IMPLEMENT_TRAIT",
            default_level: Warn,
            desc: "defining a method that should be implementing a std trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CMP_NULL",
            default_level: Warn,
            desc: "comparing a pointer to a null pointer, suggesting to use `.is_null()` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_VEC",
            default_level: Warn,
            desc: "useless `vec!`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PROC_MACRO_BACK_COMPAT",
            default_level: Deny,
            desc: "detects usage of old versions of certain proc-macro crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #83125 <https://github.com/rust-lang/rust/issues/83125>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_FORMAT",
            default_level: Warn,
            desc: "useless use of `format!`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISREFACTORED_ASSIGN_OP",
            default_level: Warn,
            desc: "having a variable on both sides of an assign op",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PARTIALEQ_NE_IMPL",
            default_level: Warn,
            desc: "re-implementing `PartialEq::ne`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VTABLE_ADDRESS_COMPARISONS",
            default_level: Deny,
            desc: "comparison with an address of a trait vtable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNDEFINED_NAKED_FUNCTION_ABI",
            default_level: Warn,
            desc: "undefined naked function ABI",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_TO_NUMERIC_CAST",
            default_level: Warn,
            desc: "casting a function pointer to a numeric type other than usize",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CLONE_ON_COPY",
            default_level: Warn,
            desc: "using `clone` on a `Copy` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REPEAT_ONCE",
            default_level: Warn,
            desc: "using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` ",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_OCTAL_UNIX_PERMISSIONS",
            default_level: Deny,
            desc: "use of non-octal value to set unix file permissions, which will be translated into octal",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_BYTES_TO_STR",
            default_level: Warn,
            desc: "transmutes from a `&[u8]` to a `&str`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "POINTER_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "pointers are not structural-match",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #62411 <https://github.com/rust-lang/rust/issues/70861>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OVERLY_COMPLEX_BOOL_EXPR",
            default_level: Deny,
            desc: "boolean expressions that contain terminals which can be eliminated",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::INFALLIBLE_DESTRUCTURING_MATCH",
            default_level: Warn,
            desc: "a `match` statement with a single infallible arm instead of a `let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SELF_ASSIGNMENT",
            default_level: Deny,
            desc: "explicit self-assignment",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROW",
            default_level: Warn,
            desc: "taking a reference that is going to be automatically dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INTO_ITER_ON_REF",
            default_level: Warn,
            desc: "using `.into_iter()` on a reference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_ATOMIC_ORDERING",
            default_level: Deny,
            desc: "usage of invalid atomic ordering in atomic operations and memory fences",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MISMATCHED_TARGET_OS",
            default_level: Deny,
            desc: "usage of `cfg(operating_system)` instead of `cfg(target_os = \"operating_system\")`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DROPPING_REFERENCES",
            default_level: Warn,
            desc: "calls to `std::mem::drop` with a reference instead of an owned value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_CRATE_TYPES",
            default_level: Deny,
            desc: "unknown crate type found in `#[crate_type]` directive",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MUT_RANGE_BOUND",
            default_level: Warn,
            desc: "for loop over a range where one of the bounds is a mutable variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ANONYMOUS_PARAMETERS",
            default_level: Warn,
            desc: "detects anonymous parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #41686 <https://github.com/rust-lang/rust/issues/41686>",
                    reason: EditionError(
                        Edition2018,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TYPE_ALIAS_BOUNDS",
            default_level: Warn,
            desc: "bounds in type aliases are not enforced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MAP_UNIT_FN",
            default_level: Warn,
            desc: "`Iterator::map` call that discard the iterator's values",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TOO_MANY_ARGUMENTS",
            default_level: Warn,
            desc: "functions with too many arguments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INFINITE_ITER",
            default_level: Deny,
            desc: "infinite iteration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MAIN_RECURSION",
            default_level: Warn,
            desc: "recursion using the entrypoint",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SPLIT_ONCE",
            default_level: Warn,
            desc: "replace `.splitn(2, pat)` with `.split_once(pat)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_ARG",
            default_level: Warn,
            desc: "fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PATH_STATEMENTS",
            default_level: Warn,
            desc: "path statements with no effect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASYNC_YIELDS_ASYNC",
            default_level: Deny,
            desc: "async blocks that return a type that can be awaited",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BOXED_LOCAL",
            default_level: Warn,
            desc: "using `Box<T>` where unnecessary",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASSIGN_OP_PATTERN",
            default_level: Warn,
            desc: "assigning the result of an operation on a variable to that same variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_ADDRESS_COMPARISONS",
            default_level: Deny,
            desc: "comparison with an address of a function item",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "SUSPICIOUS_AUTO_TRAIT_IMPLS",
            default_level: Warn,
            desc: "the rules governing auto traits have recently changed resulting in potential breakage",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #93367 <https://github.com/rust-lang/rust/issues/93367>",
                    reason: FutureReleaseSemanticsChange,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPECT_FUN_CALL",
            default_level: Warn,
            desc: "using any `expect` method with a function call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RANGE_ZIP_WITH_LEN",
            default_level: Warn,
            desc: "zipping iterator with a range when `enumerate()` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_OPERATION",
            default_level: Warn,
            desc: "outer expressions with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_CHAR",
            default_level: Warn,
            desc: "transmutes from an integer to a `char`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_GLOB_REEXPORTS",
            default_level: Warn,
            desc: "ambiguous glob re-exports",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MUTABLE_TRANSMUTES",
            default_level: Deny,
            desc: "transmuting &T to &mut T is undefined behavior, even if the reference is unused",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NONMINIMAL_BOOL",
            default_level: Warn,
            desc: "boolean expressions that can be written more concisely",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IFS_SAME_COND",
            default_level: Deny,
            desc: "consecutive `if`s with the same condition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WILDCARD_IN_OR_PATTERNS",
            default_level: Warn,
            desc: "a wildcard pattern used with others patterns in same match arm",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_EQ",
            default_level: Warn,
            desc: "use `std::ptr::eq` when comparing raw pointers",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CENUM_IMPL_DROP_CAST",
            default_level: Deny,
            desc: "a C-like enum implementing Drop is cast",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #73333 <https://github.com/rust-lang/rust/issues/73333>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "NON_FMT_PANICS",
            default_level: Warn,
            desc: "detect single-argument panic!() invocations in which the argument is not a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "",
                    reason: EditionSemanticsChange(
                        Edition2021,
                    ),
                    explain_reason: false,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_MAP_BOOL_THEN",
            default_level: Warn,
            desc: "checks for usage of `bool::then` in `Iterator::filter_map`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FIND_MAP",
            default_level: Warn,
            desc: "using `find_map` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_LABELS",
            default_level: Warn,
            desc: "detects labels that are never used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEPRECATED_CFG_ATTR",
            default_level: Warn,
            desc: "usage of `cfg_attr(rustfmt)` instead of tool attributes",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OUT_OF_BOUNDS_INDEXING",
            default_level: Deny,
            desc: "out of bounds constant indexing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEVER_LOOP",
            default_level: Deny,
            desc: "any loop that will always `break` or `return`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "MISSING_FRAGMENT_SPECIFIER",
            default_level: Deny,
            desc: "detects missing fragment specifiers in unused `macro_rules!` patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #40107 <https://github.com/rust-lang/rust/issues/40107>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EXCESSIVE_NESTING",
            default_level: Warn,
            desc: "checks for blocks nested beyond a certain threshold",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INT_PLUS_ONE",
            default_level: Warn,
            desc: "instead of using `x >= y + 1`, use `x > y`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_STR_REPEAT",
            default_level: Warn,
            desc: "manual implementation of `str::repeat`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_LITERAL_UNWRAP",
            default_level: Warn,
            desc: "using `unwrap()` related calls on `Result` and `Option` constructors",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNREACHABLE_PATTERNS",
            default_level: Warn,
            desc: "detects unreachable patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_WRITE",
            default_level: Warn,
            desc: "using the `write!()` family of functions instead of the `print!()` family of functions, when using the latter would work",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_WITH_DEFAULT",
            default_level: Warn,
            desc: "replacing a value of type `T` with `T::default()` instead of using `std::mem::take`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_ENFORCED_IMPORT_RENAMES",
            default_level: Warn,
            desc: "enforce import renames",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_ARG",
            default_level: Warn,
            desc: "passing unit to a function",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_CAST",
            default_level: Warn,
            desc: "cast to the same type, e.g., `x as i32` where `x: i32`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_FORMAT_SPECS",
            default_level: Warn,
            desc: "use of a format specifier that has no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OR_THEN_UNWRAP",
            default_level: Warn,
            desc: "checks for `.or(…).unwrap()` calls to Options and Results.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_PTR_TO_REF",
            default_level: Warn,
            desc: "transmutes from a pointer to a reference type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_CAMEL_CASE_TYPES",
            default_level: Warn,
            desc: "types, variants, traits and type parameters should have camel case names",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PRIVATE_BOUNDS",
            default_level: Warn,
            desc: "private type in secondary interface of an item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NO_MANGLE_GENERIC_ITEMS",
            default_level: Warn,
            desc: "generic items must be mangled",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOOL_ASSERT_COMPARISON",
            default_level: Warn,
            desc: "Using a boolean as comparison value in an assert_* macro when there is no need",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEW_WITHOUT_DEFAULT",
            default_level: Warn,
            desc: "`pub fn new() -> Self` method without `Default` implementation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_HASH_ONE",
            default_level: Warn,
            desc: "manual implementations of `BuildHasher::hash_one`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_SKIP_ZERO",
            default_level: Deny,
            desc: "disallows `.skip(0)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FILTER_MAP",
            default_level: Warn,
            desc: "using `filter_map` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INEFFECTIVE_UNSTABLE_TRAIT_IMPL",
            default_level: Deny,
            desc: "detects `#[unstable]` on stable trait implementations for stable types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "CLASHING_EXTERN_DECLARATIONS",
            default_level: Warn,
            desc: "detects when an extern fn has been declared with the same name but different types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BLANKET_CLIPPY_RESTRICTION_LINTS",
            default_level: Warn,
            desc: "enabling the complete restriction group",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FOR_KV_MAP",
            default_level: Warn,
            desc: "looping on a map using `iter` when `keys` or `values` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_CANONICAL_PARTIAL_ORD_IMPL",
            default_level: Warn,
            desc: "non-canonical implementation of `PartialOrd` on an `Ord` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NONTRIVIAL_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #73448 <https://github.com/rust-lang/rust/issues/73448>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPROPER_CTYPES_DEFINITIONS",
            default_level: Warn,
            desc: "proper use of libc types in foreign item definitions",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_REFERENCE_CASTING",
            default_level: Deny,
            desc: "casts of `&T` to `&mut T` without interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_SPLITN",
            default_level: Deny,
            desc: "checks for `.splitn(0, ..)` and `.splitn(1, ..)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ONLY_USED_IN_RECURSION",
            default_level: Warn,
            desc: "arguments that is only used in recursion can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_MAP_UNIT_FN",
            default_level: Warn,
            desc: "using `result.map(f)`, where `f` is a function or closure that returns `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_WITH_UNINIT",
            default_level: Deny,
            desc: "`mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_CMP",
            default_level: Deny,
            desc: "comparing unit values",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NONSENSICAL_OPEN_OPTIONS",
            default_level: Deny,
            desc: "nonsensical combination of options for opening a file",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NO_EFFECT",
            default_level: Warn,
            desc: "statements with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CROSSPOINTER_TRANSMUTE",
            default_level: Warn,
            desc: "transmutes that have to or from types that are a pointer to the other",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_LINTS",
            default_level: Warn,
            desc: "unrecognized lint attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NO_MANGLE_CONST_ITEMS",
            default_level: Deny,
            desc: "const items will not have their symbols exported",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BLOCKS_IN_IF_CONDITIONS",
            default_level: Warn,
            desc: "useless or complex blocks that can be eliminated in conditions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_LITERAL",
            default_level: Warn,
            desc: "printing a literal with a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_PARENS",
            default_level: Warn,
            desc: "`if`, `match`, `while` and `return` do not need parentheses",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_PARENS",
            default_level: Warn,
            desc: "Warn on unnecessary double parentheses",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LARGE_CONST_ARRAYS",
            default_level: Warn,
            desc: "large non-scalar const array may cause performance overhead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORMAT_COLLECT",
            default_level: Warn,
            desc: "`format!`ing every element in a collection, then collecting the strings into a new `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FOLD",
            default_level: Warn,
            desc: "using `fold` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEREF_INTO_DYN_SUPERTRAIT",
            default_level: Warn,
            desc: "`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #89460 <https://github.com/rust-lang/rust/issues/89460>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEPRECATED_WHERE_CLAUSE_LOCATION",
            default_level: Warn,
            desc: "deprecated where clause location",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXCESSIVE_PRECISION",
            default_level: Warn,
            desc: "excessive precision for float literal",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_LET_ON_ITERATOR",
            default_level: Warn,
            desc: "using a `while let` loop instead of a for loop on an iterator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_CANONICAL_CLONE_IMPL",
            default_level: Warn,
            desc: "non-canonical implementation of `Clone` on a `Copy` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TABS_IN_DOC_COMMENTS",
            default_level: Warn,
            desc: "using tabs in doc comments is not recommended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INCOMPLETE_FEATURES",
            default_level: Warn,
            desc: "incomplete features that may function improperly in some or all cases",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REDUNDANT_SEMICOLONS",
            default_level: Warn,
            desc: "detects unnecessary trailing semicolons",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "HIDDEN_GLOB_REEXPORTS",
            default_level: Warn,
            desc: "name introduced by a private item shadows a name introduced by a public glob re-export",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPROPER_CTYPES",
            default_level: Warn,
            desc: "proper use of libc types in foreign modules",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_FROM_UTF8",
            default_level: Warn,
            desc: "using a non UTF-8 literal in `std::str::from_utf8`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_TO_OWNED",
            default_level: Warn,
            desc: "calls to `to_owned` on a `Cow<'_, _>` might not do what they are expected",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_MAP_UNIT_FN",
            default_level: Warn,
            desc: "using `option.map(f)`, where `f` is a function or closure that returns `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_OPTION_WITH_NONE",
            default_level: Warn,
            desc: "replacing an `Option` with `None` instead of `take()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ABSURD_EXTREME_COMPARISONS",
            default_level: Deny,
            desc: "a comparison with a maximum or minimum value that is always true or false",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNIT_VALUE",
            default_level: Warn,
            desc: "creating a `let` binding to a value of unit type, which usually can't be used afterwards",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WHERE_CLAUSES_OBJECT_SAFETY",
            default_level: Warn,
            desc: "checks the object safety of where clauses",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #51443 <https://github.com/rust-lang/rust/issues/51443>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CHARS_NEXT_CMP",
            default_level: Warn,
            desc: "using `.chars().next()` to check if a string starts with a char",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUT_MUTEX_LOCK",
            default_level: Warn,
            desc: "`&mut Mutex::lock` does unnecessary locking",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEG_CMP_OP_ON_PARTIAL_ORD",
            default_level: Warn,
            desc: "The use of negated comparison operators on partially ordered types may produce confusing code.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS",
            default_level: Warn,
            desc: "transmutes that could be a pointer cast",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LATE_BOUND_LIFETIME_ARGUMENTS",
            default_level: Warn,
            desc: "detects generic lifetime arguments in path segments with late bound lifetime parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #42868 <https://github.com/rust-lang/rust/issues/42868>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_AS_REF",
            default_level: Warn,
            desc: "a `match` on an Option value instead of using `as_ref()` or `as_mut`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MODULO_ONE",
            default_level: Deny,
            desc: "taking a number modulo +/-1, which can either panic/overflow or always returns 0",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OVERLAPPING_RANGE_ENDPOINTS",
            default_level: Warn,
            desc: "detects range patterns with overlapping endpoints",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_ASREF",
            default_level: Warn,
            desc: "using `as_ref` where the types before and after the call are the same",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INCOMPLETE_INCLUDE",
            default_level: Deny,
            desc: "trailing content in included file",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ASYNC_FN_IN_TRAIT",
            default_level: Warn,
            desc: "use of `async fn` in definition of a publicly-reachable trait",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ENUM_CLIKE_UNPORTABLE_VARIANT",
            default_level: Deny,
            desc: "C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::RECURSIVE_FORMAT_IMPL",
            default_level: Deny,
            desc: "Format trait method called while implementing the same Format trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EMPTY_LOOP",
            default_level: Warn,
            desc: "empty `loop {}`, which should block or sleep",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_FROM_UTF8_UNCHECKED",
            default_level: Deny,
            desc: "using a non UTF-8 literal in `std::str::from_utf8_unchecked`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "USELESS_PTR_NULL_CHECKS",
            default_level: Warn,
            desc: "useless checking of non-null-typed pointer",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_NAN_COMPARISONS",
            default_level: Warn,
            desc: "detects invalid floating point NaN comparisons",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_SNAKE_CASE",
            default_level: Warn,
            desc: "variables, methods, functions, lifetime parameters and modules should have snake case names",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COMPARISON_CHAIN",
            default_level: Warn,
            desc: "`if`s that can be rewritten with `match` and `cmp`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_COUNT",
            default_level: Warn,
            desc: "replace `.iter().count()` with `.len()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_OVEREAGER_CLONED",
            default_level: Warn,
            desc: "using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_COMPONENT_PATH_IMPORTS",
            default_level: Warn,
            desc: "imports with single component path are redundant",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_DOC_COMMENTS",
            default_level: Warn,
            desc: "suspicious usage of (outer) doc comments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RANGE_PATTERNS",
            default_level: Warn,
            desc: "manually writing range patterns using a combined OR pattern (`|`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OCTAL_ESCAPES",
            default_level: Warn,
            desc: "string escape sequences looking like octal characters",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_PUB_SELF",
            default_level: Warn,
            desc: "checks for usage of `pub(self)` and `pub(in self)`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SEMICOLON_IN_EXPRESSIONS_FROM_MACROS",
            default_level: Warn,
            desc: "trailing semicolon in macro body used as expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #79813 <https://github.com/rust-lang/rust/issues/79813>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEARCH_IS_SOME",
            default_level: Warn,
            desc: "using an iterator or string search followed by `is_some()` or `is_none()`, which is more succinctly expressed as a call to `any()` or `contains()` (with negation in case of `is_none()`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_QUESTION_MARK",
            default_level: Warn,
            desc: "Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_TRANSMUTE",
            default_level: Warn,
            desc: "transmutes that have the same to and from types or could be a cast/coercion",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_PATTERNS_WITHOUT_PARTIAL_EQ",
            default_level: Warn,
            desc: "constant in pattern does not implement `PartialEq`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #116122 <https://github.com/rust-lang/rust/issues/116122>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TYVAR_BEHIND_RAW_POINTER",
            default_level: Warn,
            desc: "raw pointer to an inference variable",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #46906 <https://github.com/rust-lang/rust/issues/46906>",
                    reason: EditionError(
                        Edition2018,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CHARS_LAST_CMP",
            default_level: Warn,
            desc: "using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::READ_LINE_WITHOUT_TRIM",
            default_level: Deny,
            desc: "calling `Stdin::read_line`, then trying to parse it without first trimming",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_OWNED_EMPTY_STRINGS",
            default_level: Warn,
            desc: "detects cases of references to owned empty strings being passed as an argument to a function expecting `&str`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEPRECATED_SEMVER",
            default_level: Deny,
            desc: "use of `#[deprecated(since = \"x\")]` where x is not semver",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MAP_ENTRY",
            default_level: Warn,
            desc: "use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_COUNTER_LOOP",
            default_level: Warn,
            desc: "for-looping with an explicit counter when `_.enumerate()` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNFULFILLED_LINT_EXPECTATIONS",
            default_level: Warn,
            desc: "unfulfilled lint expectation",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "lint_reasons",
            ),
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::APPROX_CONSTANT",
            default_level: Deny,
            desc: "the approximate of a known float constant (in `std::fXX::consts`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IMPLICIT_SATURATING_ADD",
            default_level: Warn,
            desc: "Perform saturating addition instead of implicitly checking max bound of data type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LINES_FILTER_MAP_OK",
            default_level: Warn,
            desc: "filtering `std::io::Lines` with `filter_map()` or `flat_map()` might cause an infinite loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_STR_REPLACE",
            default_level: Warn,
            desc: "collapse consecutive calls to str::replace (2 or more) into a single call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRITELN_EMPTY_STRING",
            default_level: Warn,
            desc: "using `writeln!(buf, \"\")` with an empty string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_BRACES",
            default_level: Warn,
            desc: "unnecessary braces around an expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_IF",
            default_level: Warn,
            desc: "checks for empty if branches",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TYPE_COMPLEXITY",
            default_level: Warn,
            desc: "usage of very complex types that might be better factored into `type` definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEST_UNSTABLE_LINT",
            default_level: Deny,
            desc: "this unstable lint is only for testing",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "test_unstable_lint",
            ),
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FLAT_MAP_IDENTITY",
            default_level: Warn,
            desc: "call to `flat_map` where `flatten` is sufficient",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_CLONE",
            default_level: Warn,
            desc: "using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_PARENS_ON_RANGE_LITERALS",
            default_level: Warn,
            desc: "needless parenthesis on range literals can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRONG_TRANSMUTE",
            default_level: Deny,
            desc: "transmutes that are confusing at best, undefined behavior at worst and always useless",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "INTERNAL_FEATURES",
            default_level: Warn,
            desc: "internal features are not supposed to be used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LONG_RUNNING_CONST_EVAL",
            default_level: Deny,
            desc: "detects long const eval operations",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IF_SAME_THEN_ELSE",
            default_level: Warn,
            desc: "`if` with the same `then` and `else` blocks",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_OVERLAPPING_ARM",
            default_level: Warn,
            desc: "a `match` with overlapping arms",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_CONVERSION",
            default_level: Warn,
            desc: "calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_PTR",
            default_level: Warn,
            desc: "using `0 as *{const, mut} T`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_CLONED_COLLECT",
            default_level: Warn,
            desc: "using `.cloned().collect()` on slice to create a `Vec`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_TRY_FOLD",
            default_level: Warn,
            desc: "checks for usage of `Iterator::fold` with a type that implements `Try`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PROC_MACRO_DERIVE_RESOLUTION_FALLBACK",
            default_level: Deny,
            desc: "detects proc macro derives using inaccessible names from parent modules",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #83583 <https://github.com/rust-lang/rust/issues/83583>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_ATTRIBUTE",
            default_level: Deny,
            desc: "use of lint attributes on `extern crate` items",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FIELD_REASSIGN_WITH_DEFAULT",
            default_level: Warn,
            desc: "binding initialized with Default should have its fields set in the initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_LET_LOOP",
            default_level: Warn,
            desc: "`loop { if let { ... } else break }`, which can be written as a `while let` loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_GUARDS",
            default_level: Warn,
            desc: "checks for unnecessary guards in match expressions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ORDER_DEPENDENT_TRAIT_OBJECTS",
            default_level: Deny,
            desc: "trait-object types were treated as different depending on marker-trait order",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #56484 <https://github.com/rust-lang/rust/issues/56484>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OVERFLOWING_LITERALS",
            default_level: Deny,
            desc: "literal out of range for its type",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FROM_STR_RADIX_10",
            default_level: Warn,
            desc: "from_str_radix with radix 10",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BYTES_NTH",
            default_level: Warn,
            desc: "replace `.bytes().nth()` with `.as_bytes().get()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BINDINGS_WITH_VARIANT_NAME",
            default_level: Deny,
            desc: "detects pattern bindings with the same name as one of the matched variants",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_INVALID_TYPE",
            default_level: Warn,
            desc: "holding a type across an await point which is not allowed to be held as per the configuration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INLINE_FN_WITHOUT_BODY",
            default_level: Deny,
            desc: "use of `#[inline]` on trait methods without bodies",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_ELSE",
            default_level: Warn,
            desc: "empty else branch",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ARITHMETIC_OVERFLOW",
            default_level: Deny,
            desc: "arithmetic operation overflows",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_IN_FORMAT_IMPL",
            default_level: Warn,
            desc: "use of a print macro in a formatting trait impl",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROWED_REFERENCE",
            default_level: Warn,
            desc: "destructuring a reference and borrowing the inner value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRLEN_ON_C_STRINGS",
            default_level: Warn,
            desc: "using `libc::strlen` on a `CString` or `CStr` value, while `as_bytes().len()` or `to_bytes().len()` respectively can be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "COINDUCTIVE_OVERLAP_IN_COHERENCE",
            default_level: Deny,
            desc: "impls that are not considered to overlap may be considered to overlap in the future",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #114040 <https://github.com/rust-lang/rust/issues/114040>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "NON_UPPER_CASE_GLOBALS",
            default_level: Warn,
            desc: "static constants should have uppercase identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CMP_OWNED",
            default_level: Warn,
            desc: "creating owned instances for comparing with others, e.g., `x == \"foo\".to_string()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ALLOCATION",
            default_level: Warn,
            desc: "detects unnecessary allocations that can be eliminated",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_NAN_TO_INT",
            default_level: Warn,
            desc: "casting a known floating-point NaN into an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DRAIN_COLLECT",
            default_level: Warn,
            desc: "calling `.drain(..).collect()` to move all elements into a new collection",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRING_EXTEND_CHARS",
            default_level: Warn,
            desc: "using `x.extend(s.chars())` where s is a `&str` or `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRIM_SPLIT_WHITESPACE",
            default_level: Warn,
            desc: "using `str::trim()` or alike before `str::split_whitespace`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LEGACY_DERIVE_HELPERS",
            default_level: Warn,
            desc: "detects derive helper attributes that are used before they are introduced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #79202 <https://github.com/rust-lang/rust/issues/79202>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NEXT_LOOP",
            default_level: Deny,
            desc: "for-looping over `_.next()` which is probably not intended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FILTER",
            default_level: Warn,
            desc: "reimplementation of `filter`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_ASSOCIATED_ITEMS",
            default_level: Deny,
            desc: "ambiguous associated items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #57644 <https://github.com/rust-lang/rust/issues/57644>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNUSED_COMPARISONS",
            default_level: Warn,
            desc: "comparisons made useless by limits of the types involved",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_TYPES",
            default_level: Warn,
            desc: "use of disallowed types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_IDENTITY",
            default_level: Warn,
            desc: "using iterator.map(|x| x)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SHORT_CIRCUIT_STATEMENT",
            default_level: Warn,
            desc: "using a short circuit boolean condition as a statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_REFCELL_REF",
            default_level: Warn,
            desc: "inside an async function, holding a `RefCell` ref while calling `await`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_DOCTEST_MAIN",
            default_level: Warn,
            desc: "presence of `fn main() {` in code examples",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_AT_REST_PATTERN",
            default_level: Warn,
            desc: "checks for `[all @ ..]` where `all` would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_ALLOCATION",
            default_level: Warn,
            desc: "redundant allocation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "EXPORTED_PRIVATE_DEPENDENCIES",
            default_level: Warn,
            desc: "public interface leaks type from a private dependency",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROW_DEREF_REF",
            default_level: Warn,
            desc: "deref on an immutable reference returns the same type as itself",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::GET_FIRST",
            default_level: Warn,
            desc: "Using `x.get(0)` when `x.first()` is simpler",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FIND_MAP",
            default_level: Warn,
            desc: "using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_VARIABLES",
            default_level: Warn,
            desc: "detect variables which are not used in any way",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_REF_PATS",
            default_level: Warn,
            desc: "a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PANICKING_UNWRAP",
            default_level: Deny,
            desc: "checks for calls of `unwrap[_err]()` that will always fail",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WRITE_WITH_NEWLINE",
            default_level: Warn,
            desc: "using `write!()` with a format string that ends in a single newline",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_BITS",
            default_level: Warn,
            desc: "manual implementation of `size_of::<T>() * 8` can be simplified with `T::BITS`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXTEND_WITH_DRAIN",
            default_level: Warn,
            desc: "using vec.append(&mut vec) to move the full range of a vector to another",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_NEXT_BACK",
            default_level: Warn,
            desc: "manual reverse iteration of `DoubleEndedIterator`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MAP",
            default_level: Warn,
            desc: "reimplementation of `map`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ASSOCIATED_TYPE_BOUNDS",
            default_level: Warn,
            desc: "detects unused `Foo = Bar` bounds in `dyn Trait<Foo = Bar>`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_VALUE",
            default_level: Warn,
            desc: "an invalid value is being created (such as a null reference)",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SUSPICIOUS_DOUBLE_REF_OP",
            default_level: Warn,
            desc: "suspicious call of trait method on `&&T`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_NAMES",
            default_level: Warn,
            desc: "usage of a disallowed/placeholder name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_MAP_IDENTITY",
            default_level: Warn,
            desc: "call to `filter_map` where `flatten` is sufficient",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_EVALUATABLE_UNCHECKED",
            default_level: Warn,
            desc: "detects a generic constant is used in a type without a emitting a warning",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #76200 <https://github.com/rust-lang/rust/issues/76200>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_LOCK",
            default_level: Warn,
            desc: "inside an async function, holding a `MutexGuard` while calling `await`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNEEDED_WILDCARD_PATTERN",
            default_level: Warn,
            desc: "tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROWED_BOX",
            default_level: Warn,
            desc: "a borrow of a boxed type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VEC_INIT_THEN_PUSH",
            default_level: Warn,
            desc: "`push` immediately after `Vec` creation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ARC_WITH_NON_SEND_SYNC",
            default_level: Warn,
            desc: "using `Arc` with a type that does not implement `Send` and `Sync`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITEMS_AFTER_TEST_MODULE",
            default_level: Warn,
            desc: "An item was found after the testing module `tests`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FILTER_MAP",
            default_level: Warn,
            desc: "using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_ASYNC_BLOCK",
            default_level: Warn,
            desc: "`async { future.await }` can be replaced by `future`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "COHERENCE_LEAK_CHECK",
            default_level: Warn,
            desc: "distinct impls distinguished only by the leak-check code",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #56105 <https://github.com/rust-lang/rust/issues/56105>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IDENTITY_OP",
            default_level: Warn,
            desc: "using identity operations, e.g., `x + 0` or `y / 1`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_UNWRAP",
            default_level: Warn,
            desc: "checks for calls of `unwrap[_err]()` that cannot fail",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UPPER_CASE_ACRONYMS",
            default_level: Warn,
            desc: "capitalized acronyms are against the naming convention",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_MACROS",
            default_level: Warn,
            desc: "detects macros that were not used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_SLICE_FROM_RAW_PARTS",
            default_level: Warn,
            desc: "casting a slice created from a pointer and length to a slice pointer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PARTIALEQ_TO_NONE",
            default_level: Warn,
            desc: "Binary comparison to `Option<T>::None` relies on `T: PartialEq`, which is unneeded",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNCONDITIONAL_PANIC",
            default_level: Deny,
            desc: "operation will cause a panic at runtime",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ASSIGNMENT_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of `*=`, `-=` or `!=`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNSAFE_REMOVED_FROM_NAME",
            default_level: Warn,
            desc: "`unsafe` removed from API names on import",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_OR_MALFORMED_DIAGNOSTIC_ATTRIBUTES",
            default_level: Warn,
            desc: "unrecognized or malformed diagnostic attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "diagnostic_namespace",
            ),
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NOOP_METHOD_CALL",
            default_level: Warn,
            desc: "detects the use of well-known noop methods",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_METHODS",
            default_level: Warn,
            desc: "use of a disallowed method call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LARGE_ENUM_VARIANT",
            default_level: Warn,
            desc: "large size difference between variants on an enum",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INSPECT_FOR_EACH",
            default_level: Warn,
            desc: "using `.inspect().for_each()`, which can be replaced with `.for_each()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TOPLEVEL_REF_ARG",
            default_level: Warn,
            desc: "an entire binding declared as `ref`, in a function argument or a `let` statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNSUPPORTED_CALLING_CONVENTIONS",
            default_level: Warn,
            desc: "use of unsupported calling convention",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #87678 <https://github.com/rust-lang/rust/issues/87678>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FROM_RAW_WITH_VOID_PTR",
            default_level: Warn,
            desc: "creating a `Box` from a void raw pointer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_PATTERN",
            default_level: Warn,
            desc: "using `name @ _` in a pattern",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_IO_AMOUNT",
            default_level: Deny,
            desc: "unused written/read amount",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "LARGE_ASSIGNMENTS",
            default_level: Warn,
            desc: "detects large moves or copies",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BYTES_COUNT_TO_LEN",
            default_level: Warn,
            desc: "Using `bytes().count()` when `len()` performs the same functionality",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_FLATTEN",
            default_level: Warn,
            desc: "using combinations of `flatten` and `map` which can usually be written as a single method call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_OFFSET_WITH_CAST",
            default_level: Warn,
            desc: "unneeded pointer offset cast",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SOFT_UNSTABLE",
            default_level: Deny,
            desc: "a feature gate that doesn't break dependent crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #64266 <https://github.com/rust-lang/rust/issues/64266>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNUSED_MUST_USE",
            default_level: Warn,
            desc: "unused result of a type flagged as `#[must_use]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_MATCH",
            default_level: Warn,
            desc: "a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FLOAT_EQUALITY_WITHOUT_ABS",
            default_level: Warn,
            desc: "float equality check without `.abs()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SIZE_OF_IN_ELEMENT_COUNT",
            default_level: Deny,
            desc: "using `size_of::<T>` or `size_of_val::<T>` where a count of elements of `T` is expected",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "BARE_TRAIT_OBJECTS",
            default_level: Warn,
            desc: "suggest using `dyn Trait` for trait objects",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>",
                    reason: EditionError(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::GET_LAST_WITH_LEN",
            default_level: Warn,
            desc: "Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_COMMAND_ARG_SPACE",
            default_level: Warn,
            desc: "single command line argument that looks like it should be multiple arguments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRING_FROM_UTF8_AS_BYTES",
            default_level: Warn,
            desc: "casting string slices to byte slices and back",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_DIVIDED_BY_ZERO",
            default_level: Warn,
            desc: "usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PUB_USE_OF_PRIVATE_EXTERN_CRATE",
            default_level: Deny,
            desc: "detect public re-exports of private extern crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #34537 <https://github.com/rust-lang/rust/issues/34537>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RANGE_LOOP",
            default_level: Warn,
            desc: "for-looping over a range of indices where an iterator over items would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_SLICING",
            default_level: Warn,
            desc: "redundant slicing of the whole range of a type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ASSIGNMENTS",
            default_level: Warn,
            desc: "detect assignments that will never be read",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_MACROS",
            default_level: Warn,
            desc: "use of a disallowed macro",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISTYPED_LITERAL_SUFFIXES",
            default_level: Deny,
            desc: "mistyped literal suffix",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_FINITE",
            default_level: Warn,
            desc: "use dedicated method to check if a float is finite",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRITE_LITERAL",
            default_level: Warn,
            desc: "writing a literal with a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_SAFETY_DOC",
            default_level: Warn,
            desc: "`pub unsafe fn` without `# Safety` docs",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_ASCII_CHECK",
            default_level: Warn,
            desc: "use dedicated method to check ascii range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_RESULT_OK",
            default_level: Warn,
            desc: "usage of `ok()` in `let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BUILTIN_TYPE_SHADOW",
            default_level: Warn,
            desc: "shadowing a builtin type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NAMED_ARGUMENTS_USED_POSITIONALLY",
            default_level: Warn,
            desc: "named arguments in format used positionally",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SKIP_WHILE_NEXT",
            default_level: Warn,
            desc: "using `skip_while(p).next()`, which is more succinctly expressed as `.find(!p)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_MAP_ON_CONSTRUCTOR",
            default_level: Warn,
            desc: "using `map`/`map_err` on `Option` or `Result` constructors",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_DOC_COMMENTS",
            default_level: Warn,
            desc: "detects doc comments that aren't used by rustdoc",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEREF_NULLPTR",
            default_level: Warn,
            desc: "detects when an null pointer is dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_NON_EXHAUSTIVE",
            default_level: Warn,
            desc: "manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ERASING_OP",
            default_level: Deny,
            desc: "using erasing operations, e.g., `x * 0` or `y & 0`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SERDE_API_MISUSE",
            default_level: Deny,
            desc: "various things that will negatively affect your serde experience",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_RETURN_EXPECTING_ORD",
            default_level: Deny,
            desc: "fn arguments of type Fn(...) -> Ord returning the unit type ().",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "SPECIAL_MODULE_NAME",
            default_level: Warn,
            desc: "module declarations for files with a special meaning",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FUNCTION_ITEM_REFERENCES",
            default_level: Warn,
            desc: "suggest casting to a function pointer when attempting to take references to function items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_NULL_TO_FN",
            default_level: Deny,
            desc: "transmute results in a null function pointer, which is undefined behavior",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS",
            default_level: Deny,
            desc: "macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #52234 <https://github.com/rust-lang/rust/issues/52234>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MEMCPY",
            default_level: Warn,
            desc: "manually copying items between slices",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_STR_CASE_MISMATCH",
            default_level: Deny,
            desc: "creation of a case altering match expression with non-compliant arms",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DEPRECATED",
            default_level: Warn,
            desc: "detects use of deprecated items",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOX_DEFAULT",
            default_level: Warn,
            desc: "Using Box::new(T::default()) instead of Box::default()",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_INFINITE",
            default_level: Warn,
            desc: "use dedicated method to check if a float is infinite",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_COLLECT_RESULT_UNIT",
            default_level: Warn,
            desc: "using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROW_INTERIOR_MUTABLE_CONST",
            default_level: Warn,
            desc: "referencing `const` with interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORGET_NON_DROP",
            default_level: Warn,
            desc: "call to `std::mem::forget` with a value which does not implement `Drop`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MAIN_SEPARATOR_STR",
            default_level: Warn,
            desc: "`&std::path::MAIN_SEPARATOR.to_string()` can be replaced by `std::path::MAIN_SEPARATOR_STR`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_PREFIXED_LITERAL",
            default_level: Warn,
            desc: "integer literals starting with `0`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRECEDENCE",
            default_level: Warn,
            desc: "operations where precedence may be unclear",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VEC_BOX",
            default_level: Warn,
            desc: "usage of `Vec<Box<T>>` where T: Sized, vector elements are already on the heap",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_IMPORTS",
            default_level: Warn,
            desc: "imports that are never used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_UNARY_OP_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of unary `-` or `!` on the RHS of a BinOp",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IF_LET_MUTEX",
            default_level: Deny,
            desc: "locking a `Mutex` in an `if let` block can cause deadlocks",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_NEXT",
            default_level: Warn,
            desc: "using `filter(p).next()`, which is more succinctly expressed as `.find(p)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNINIT_VEC",
            default_level: Deny,
            desc: "Vec with uninitialized data",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::PRINTLN_EMPTY_STRING",
            default_level: Warn,
            desc: "using `println!(\"\")` with an empty string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_GLOB_IMPORTS",
            default_level: Warn,
            desc: "detects certain glob imports that require reporting an ambiguity error",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #114095 <https://github.com/rust-lang/rust/issues/114095>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_ASYNC_FN",
            default_level: Warn,
            desc: "manual implementations of `async` functions can be simplified using the dedicated syntax",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OP_REF",
            default_level: Warn,
            desc: "taking a reference to satisfy the type constraints on `==`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SELF_NAMED_CONSTRUCTORS",
            default_level: Warn,
            desc: "method should not have the same name as the type it is implemented for",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TEMPORARY_ASSIGNMENT",
            default_level: Warn,
            desc: "assignments to temporaries",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BREAK_WITH_LABEL_AND_LOOP",
            default_level: Warn,
            desc: "`break` expression with label and unlabeled loop as value expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ABS_TO_UNSIGNED",
            default_level: Warn,
            desc: "casting the result of `abs()` to an unsigned integer can panic",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_SKIP_NEXT",
            default_level: Warn,
            desc: "using `.skip(x).next()` on an iterator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEEK_TO_START_INSTEAD_OF_REWIND",
            default_level: Warn,
            desc: "jumping to the start of stream using `seek` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_ARBITRARY_SELF_TYPE",
            default_level: Warn,
            desc: "type of `self` parameter is already by default `Self`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTING_NULL",
            default_level: Deny,
            desc: "transmutes from a null pointer to a reference, which is undefined behavior",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME",
            default_level: Deny,
            desc: "detects usage of `#![cfg_attr(..., crate_type/crate_name = \"...\")]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #91632 <https://github.com/rust-lang/rust/issues/91632>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TO_DIGIT_IS_SOME",
            default_level: Warn,
            desc: "`char.is_digit()` is clearer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INLINE_NO_SANITIZE",
            default_level: Warn,
            desc: "detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASSERTIONS_ON_CONSTANTS",
            default_level: Warn,
            desc: "`assert!(true)` / `assert!(false)` will be optimized out by the compiler, and should probably be replaced by a `panic!()` or `unreachable!()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INHERENT_TO_STRING_SHADOW_DISPLAY",
            default_level: Deny,
            desc: "type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EXTRA_UNUSED_LIFETIMES",
            default_level: Warn,
            desc: "unused lifetimes in function definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_LAZY_EVALUATIONS",
            default_level: Warn,
            desc: "using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DECLARE_INTERIOR_MUTABLE_CONST",
            default_level: Warn,
            desc: "declaring `const` with interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CRATE_IN_MACRO_DEF",
            default_level: Warn,
            desc: "using `crate` in a macro definition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DROP_NON_DROP",
            default_level: Warn,
            desc: "call to `std::mem::drop` with a value which does not implement `Drop`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOX_COLLECTION",
            default_level: Warn,
            desc: "usage of `Box<Vec<T>>`, vector elements are already on the heap",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_TYPE_PARAM_DEFAULT",
            default_level: Deny,
            desc: "type parameter default erroneously allowed in invalid location",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #36887 <https://github.com/rust-lang/rust/issues/36887>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BIND_INSTEAD_OF_MAP",
            default_level: Warn,
            desc: "using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEAD_CODE",
            default_level: Warn,
            desc: "detect unused, unexported items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INCONSISTENT_DIGIT_GROUPING",
            default_level: Warn,
            desc: "integer literals with digits grouped inconsistently",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EQ_OP",
            default_level: Deny,
            desc: "equal operands on both sides of a comparison or bitwise combination (e.g., `x == x`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RETURN_WITH_QUESTION_MARK",
            default_level: Warn,
            desc: "using a return statement like `return Err(expr)?;` where removing it would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ENUM_CONSTRUCTOR",
            default_level: Warn,
            desc: "casts from an enum tuple constructor to an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_REM_EUCLID",
            default_level: Warn,
            desc: "manually reimplementing `rem_euclid`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NTH",
            default_level: Warn,
            desc: "using `.iter().nth()` on a standard library type with O(1) element access",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEEK_FROM_CURRENT",
            default_level: Warn,
            desc: "use dedicated method for seek from current position",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPLIED_BOUNDS_ENTAILMENT",
            default_level: Deny,
            desc: "impl method assumes more implied bounds than its corresponding trait method",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #105572 <https://github.com/rust-lang/rust/issues/105572>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNDERSCORE_FUTURE",
            default_level: Warn,
            desc: "non-binding `let` on a future",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_UNWRAP_OR",
            default_level: Warn,
            desc: "finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NAMED_ASM_LABELS",
            default_level: Deny,
            desc: "named labels in inline assembly",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::DUPLICATE_MOD",
            default_level: Warn,
            desc: "file loaded as module multiple times",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INHERENT_TO_STRING",
            default_level: Warn,
            desc: "type implements inherent method `to_string()`, but should instead implement the `Display` trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_LIFETIMES",
            default_level: Warn,
            desc: "using explicit lifetimes for references in function arguments when elision rules would allow omitting them",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_CHAR_ADD_STR",
            default_level: Warn,
            desc: "`push_str()` or `insert_str()` used with a single-character string literal as parameter",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_UPDATE",
            default_level: Warn,
            desc: "using `Foo { ..base }` when there are no missing fields",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNINHABITED_STATIC",
            default_level: Warn,
            desc: "uninhabited static",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #74840 <https://github.com/rust-lang/rust/issues/74840>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_ELSE_IF",
            default_level: Warn,
            desc: "nested `else`-`if` expressions that can be collapsed (e.g., `else { if x { ... } }`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_WHILE_LET_SOME",
            default_level: Warn,
            desc: "checking for emptiness of a `Vec` in the loop condition and popping an element in the body",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_OP_ASSIGN_IMPL",
            default_level: Warn,
            desc: "suspicious use of operators in impl of OpAssign trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SWAP_PTR_TO_REF",
            default_level: Warn,
            desc: "call to `mem::swap` using pointer derived references",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISNAMED_GETTERS",
            default_level: Warn,
            desc: "getter method returning the wrong field",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OBFUSCATED_IF_ELSE",
            default_level: Warn,
            desc: "use of `.then_some(..).unwrap_or(..)` can be written more clearly with `if .. else ..`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_MAP_OR_INTO_OPTION",
            default_level: Warn,
            desc: "using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_UNSAFE",
            default_level: Warn,
            desc: "unnecessary use of an `unsafe` block",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LET_WITH_TYPE_UNDERSCORE",
            default_level: Warn,
            desc: "unneeded underscore type (`_`) in a variable declaration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DURATION_SUBSEC",
            default_level: Warn,
            desc: "checks for calculation of subsecond microseconds or milliseconds",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RETURN",
            default_level: Warn,
            desc: "using a return statement like `return expr;` where an expression would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WARNINGS",
            default_level: Warn,
            desc: "mass-change the level for lints which produce warnings",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_SLICE_DIFFERENT_SIZES",
            default_level: Deny,
            desc: "casting using `as` between raw pointers to slices of types with different sizes",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ITER_KV_MAP",
            default_level: Warn,
            desc: "iterating on map using `iter` when `keys` or `values` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NTH_ZERO",
            default_level: Warn,
            desc: "replace `iter.nth(0)` with `iter.next()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ALMOST_SWAPPED",
            default_level: Deny,
            desc: "`foo = bar; bar = foo` sequence",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNSOUND_COLLECTION_TRANSMUTE",
            default_level: Deny,
            desc: "transmute between collections of layout-incompatible types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OPAQUE_HIDDEN_INFERRED_BOUND",
            default_level: Warn,
            desc: "detects the use of nested `impl Trait` types in associated type bounds that are not general enough",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ELSE_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of `else`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNDERSCORE_LOCK",
            default_level: Deny,
            desc: "non-binding `let` on a synchronization lock",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_STRIP",
            default_level: Warn,
            desc: "suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_MATCH",
            default_level: Warn,
            desc: "Nested `match` or `if let` expressions where the patterns may be \"collapsed\" together.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_WITH_NEWLINE",
            default_level: Warn,
            desc: "using `print!()` with a format string that ends in a single newline",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REFINING_IMPL_TRAIT",
            default_level: Warn,
            desc: "impl trait in impl method signature does not match trait method signature",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NEXT_SLICE",
            default_level: Warn,
            desc: "using `.iter().next()` on a sliced array, which can be shortened to just `.get()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_MUT_PASSED",
            default_level: Warn,
            desc: "an argument passed as a mutable reference although the callee only demands an immutable reference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_IF",
            default_level: Warn,
            desc: "nested `if`s that can be collapsed (e.g., `if x { if y { ... } }`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_ENUMERATE_INDEX",
            default_level: Warn,
            desc: "using `.enumerate()` and immediately dropping the index",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MIXED_CASE_HEX_LITERALS",
            default_level: Warn,
            desc: "hex literals whose letter digits are not consistently upper- or lowercased",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_LATE_INIT",
            default_level: Warn,
            desc: "late initializations that can be replaced by a `let` statement with an initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SIZE_OF_REF",
            default_level: Warn,
            desc: "Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ARITHMETIC_IMPL",
            default_level: Warn,
            desc: "suspicious use of operators in impl of arithmetic trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WHILE_TRUE",
            default_level: Warn,
            desc: "suggest using `loop { }` instead of `while true { }`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNEXPECTED_CFGS",
            default_level: Warn,
            desc: "detects unexpected names and values in `#[cfg]` conditions",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_LARGE_ERR",
            default_level: Warn,
            desc: "function returning `Result` with large `Err` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NO_EFFECT_REPLACE",
            default_level: Warn,
            desc: "replace with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_MAP_OR_NONE",
            default_level: Warn,
            desc: "using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ASM_SUB_REGISTER",
            default_level: Warn,
            desc: "using only a subset of a register for inline asm inputs",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_COMPARISONS",
            default_level: Deny,
            desc: "double comparisons where one of them can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_AND_RETURN",
            default_level: Warn,
            desc: "creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ILLEGAL_FLOATING_POINT_LITERAL_PATTERN",
            default_level: Warn,
            desc: "floating-point literals cannot be used in patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #41620 <https://github.com/rust-lang/rust/issues/41620>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ENUM_TRUNCATION",
            default_level: Warn,
            desc: "casts from an enum type to an integral type which will truncate the value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_FILTER_MAP",
            default_level: Warn,
            desc: "filtering `Option` for `Some` then force-unwrapping, which can be one type-safe operation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SWAP",
            default_level: Warn,
            desc: "manual swap of two variables",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MIXED_SCRIPT_CONFUSABLES",
            default_level: Warn,
            desc: "detects Unicode scripts whose mixed script confusables codepoints are solely used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "RENAMED_AND_REMOVED_LINTS",
            default_level: Warn,
            desc: "lints that have been renamed or removed",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_MATCH",
            default_level: Warn,
            desc: "`match` or match-like `if let` that are unnecessary",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ATTRIBUTES",
            default_level: Warn,
            desc: "detects attributes that were not used by the compiler",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ALMOST_COMPLETE_RANGE",
            default_level: Warn,
            desc: "almost complete range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSUAL_BYTE_GROUPINGS",
            default_level: Warn,
            desc: "binary or hex literals that aren't grouped by four",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_AS_REF_DEREF",
            default_level: Warn,
            desc: "using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUTABLE_KEY_TYPE",
            default_level: Warn,
            desc: "Check for mutable `Map`/`Set` key type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORBIDDEN_LINT_GROUPS",
            default_level: Warn,
            desc: "applying forbid to lint-groups",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #81670 <https://github.com/rust-lang/rust/issues/81670>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORMAT_IN_FORMAT_ARGS",
            default_level: Warn,
            desc: "`format!` used in a macro that does formatting",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FIND",
            default_level: Warn,
            desc: "manual implementation of `Iterator::find`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SLICE_SIZE_CALCULATION",
            default_level: Warn,
            desc: "manual slice size calculation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_NEG",
            default_level: Warn,
            desc: "`--x`, which is a double negation of `x` and not a pre-decrement as in C/C++",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEREF_ADDROF",
            default_level: Warn,
            desc: "use of `*&` or `*&mut` in an expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE",
            default_level: Warn,
            desc: "`[u8]` or `str` used in a packed struct with `derive`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #107457 <https://github.com/rust-lang/rust/issues/107457>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_UNIT_ERR",
            default_level: Warn,
            desc: "public function returning `Result` with an `Err` type of `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_OPTION_TAKE",
            default_level: Warn,
            desc: "using `.as_ref().take()` on a temporary value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OVERFLOW_CHECK_CONDITIONAL",
            default_level: Warn,
            desc: "overflow checks inspired by C which are likely to panic",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MODULE_INCEPTION",
            default_level: Warn,
            desc: "modules that have the same name as their parent module",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IMPOSSIBLE_COMPARISONS",
            default_level: Deny,
            desc: "double comparisons that will never evaluate to `true`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNNAMEABLE_TEST_ITEMS",
            default_level: Warn,
            desc: "detects an item that cannot be named being marked as `#[test_case]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITERATOR_STEP_BY_ZERO",
            default_level: Deny,
            desc: "using `Iterator::step_by(0)`, which will panic at runtime",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::VEC_RESIZE_TO_ZERO",
            default_level: Deny,
            desc: "emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BOOL_ASSIGN",
            default_level: Warn,
            desc: "setting the same boolean variable in both branches of an if-statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_NUM_TO_BYTES",
            default_level: Warn,
            desc: "transmutes from a number to an array of `u8`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INDIRECT_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "constant used in pattern contains value of non-structural-match type in a field or a variant",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #62411 <https://github.com/rust-lang/rust/issues/62411>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONFUSABLE_IDENTS",
            default_level: Warn,
            desc: "detects visually confusable pairs between identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_SHORTHAND_FIELD_PATTERNS",
            default_level: Warn,
            desc: "using `Struct { x: x }` instead of `Struct { x }` in a pattern",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COMPARISON_TO_EMPTY",
            default_level: Warn,
            desc: "checking `x == \"\"` or `x == []` (or similar) when `.is_empty()` could be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
}
[compiler/rustc_lint/src/late.rs:431] &hashmap = {
    LintId {
        lint: Lint {
            name: "UNUSED_MUT",
            default_level: Warn,
            desc: "detect mut variables which don't need to be mutable",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_CLOSURE",
            default_level: Warn,
            desc: "redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FALLIBLE_CONVERSIONS",
            default_level: Warn,
            desc: "calling the `try_from` and `try_into` trait methods when `From`/`Into` is implemented",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_FEATURES",
            default_level: Warn,
            desc: "unused features found in crate-level `#[feature]` directives",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVE_ORD_XOR_PARTIAL_ORD",
            default_level: Deny,
            desc: "deriving `Ord` but implementing `PartialOrd` explicitly",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_SPIN_LOOP",
            default_level: Warn,
            desc: "An empty busy waiting loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DUPLICATE_UNDERSCORE_ARGUMENT",
            default_level: Warn,
            desc: "function arguments having names which only differ by an underscore",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::QUESTION_MARK",
            default_level: Warn,
            desc: "checks for expressions that could be replaced by the question mark operator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LET_UNDERSCORE_LOCK",
            default_level: Deny,
            desc: "non-binding let on a synchronization lock",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::POSSIBLE_MISSING_COMMA",
            default_level: Deny,
            desc: "possible missing comma in array",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IS_DIGIT_ASCII_RADIX",
            default_level: Warn,
            desc: "use of `char::is_digit(..)` with literal radix of 10 or 16",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNWRAP_OR_DEFAULT",
            default_level: Warn,
            desc: "using `.unwrap_or`, etc. with an argument that constructs a default value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_CLOSURE_CALL",
            default_level: Warn,
            desc: "throwaway closures called in the expression they are defined",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ELIDED_LIFETIMES_IN_ASSOCIATED_CONSTANT",
            default_level: Warn,
            desc: "elided lifetimes cannot be used in associated constants in impls",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #115010 <https://github.com/rust-lang/rust/issues/115010>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_COMPARISONS",
            default_level: Warn,
            desc: "unnecessary double comparisons that can be simplified",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RANGE_CONTAINS",
            default_level: Warn,
            desc: "manually reimplementing {`Range`, `RangeInclusive`}`::contains`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEXT_DIRECTION_CODEPOINT_IN_COMMENT",
            default_level: Deny,
            desc: "invisible directionality-changing codepoints in comment",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_CHAR_PATTERN",
            default_level: Warn,
            desc: "using a single-character str where a char could be used, e.g., `_.split(\"x\")`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_SORT_BY",
            default_level: Warn,
            desc: "Use of `Vec::sort_by` when `Vec::sort_by_key` or `Vec::sort` would be clearer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOOL_COMPARISON",
            default_level: Warn,
            desc: "comparing a variable to a boolean, e.g., `if x == true` or `if x != true`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_ENV_UNWRAP",
            default_level: Deny,
            desc: "using `option_env!(...).unwrap()` to get environment variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SLOW_VECTOR_INITIALIZATION",
            default_level: Warn,
            desc: "slow vector initialization",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_FLOAT_TO_INT",
            default_level: Warn,
            desc: "transmutes from a float to an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNCOMMON_CODEPOINTS",
            default_level: Warn,
            desc: "detects uncommon Unicode codepoints in identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS",
            default_level: Warn,
            desc: "transparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #78586 <https://github.com/rust-lang/rust/issues/78586>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LEN_WITHOUT_IS_EMPTY",
            default_level: Warn,
            desc: "traits or impls with a public `len` method but no corresponding `is_empty` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_LIKE_MATCHES_MACRO",
            default_level: Warn,
            desc: "a match that could be written with the matches! macro",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BAD_ASM_STYLE",
            default_level: Warn,
            desc: "incorrect use of inline assembly",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WAKER_CLONE_WAKE",
            default_level: Warn,
            desc: "cloning a `Waker` only to wake it",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZST_OFFSET",
            default_level: Deny,
            desc: "Check for offset calculations on raw pointers to zero-sized types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNDROPPED_MANUALLY_DROPS",
            default_level: Deny,
            desc: "calls to `std::mem::drop` with `std::mem::ManuallyDrop` instead of it's inner value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNSTABLE_NAME_COLLISIONS",
            default_level: Warn,
            desc: "detects name collision with an existing but unstable method",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #48919 <https://github.com/rust-lang/rust/issues/48919>",
                    reason: Custom(
                        "once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!",
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAYBE_MISUSED_CFG",
            default_level: Warn,
            desc: "prevent from misusing the wrong attr name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVED_HASH_WITH_MANUAL_EQ",
            default_level: Deny,
            desc: "deriving `Hash` but implementing `PartialEq` explicitly",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FLATTEN",
            default_level: Warn,
            desc: "for loops over `Option`s or `Result`s with a single expression can be simplified",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_STATIC_LIFETIMES",
            default_level: Warn,
            desc: "Using explicit `'static` lifetime for constants or statics when elision rules would allow omitting them.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_ITEM_MUTATION",
            default_level: Warn,
            desc: "detects attempts to mutate a `const` item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_MUST_USE",
            default_level: Warn,
            desc: "`#[must_use]` attribute on a `#[must_use]`-returning function / method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ERR_EXPECT",
            default_level: Warn,
            desc: "using `.err().expect(\"\")` when `.expect_err(\"\")` can be used",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_OPTION_AS_DEREF",
            default_level: Warn,
            desc: "no-op use of `deref` or `deref_mut` method to `Option`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEG_MULTIPLY",
            default_level: Warn,
            desc: "multiplying integers by `-1`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RC_CLONE_IN_VEC_INIT",
            default_level: Warn,
            desc: "initializing reference-counted pointer in `vec![elem; len]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ENUM_VARIANT_NAMES",
            default_level: Warn,
            desc: "enums where all variants share a prefix/postfix",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROWS_FOR_GENERIC_ARGS",
            default_level: Warn,
            desc: "taking a reference that is going to be automatically dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REVERSED_EMPTY_RANGES",
            default_level: Deny,
            desc: "reversing the limits of range expressions, resulting in empty ranges",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ILL_FORMED_ATTRIBUTE_INPUT",
            default_level: Deny,
            desc: "ill-formed attribute inputs that were previously accepted and used in practice",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #57571 <https://github.com/rust-lang/rust/issues/57571>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::CHAR_LIT_AS_U8",
            default_level: Warn,
            desc: "casting a character literal to `u8` truncates",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TO_STRING_IN_FORMAT_ARGS",
            default_level: Warn,
            desc: "`to_string` applied to a type that implements `Display` in format args",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEW_RET_NO_SELF",
            default_level: Warn,
            desc: "not returning type containing `Self` in a `new` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_HASH",
            default_level: Deny,
            desc: "hashing a unit value, which does nothing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BOOL",
            default_level: Warn,
            desc: "if-statements with plain booleans in the then- and else-clause, e.g., `if p { true } else { false }`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESERVE_AFTER_INITIALIZATION",
            default_level: Warn,
            desc: "`reserve` called immediately after `Vec` creation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_NON_ZERO",
            default_level: Warn,
            desc: "transmutes from an integer to a non-zero wrapper",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_MACRO_EXPORT_ARGUMENTS",
            default_level: Warn,
            desc: "\"invalid_parameter\" isn't a valid argument for `#[macro_export]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DYN_DROP",
            default_level: Warn,
            desc: "trait objects of the form `dyn Drop` are useless",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LEN_ZERO",
            default_level: Warn,
            desc: "checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_PATTERN_MATCHING",
            default_level: Warn,
            desc: "use the proper utility function avoiding an `if let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_UNIT",
            default_level: Warn,
            desc: "needless unit expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEXT_DIRECTION_CODEPOINT_IN_LITERAL",
            default_level: Deny,
            desc: "detect special Unicode codepoints that affect the visual representation of text on screen, changing the direction in which text flows",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "INVALID_DOC_ATTRIBUTES",
            default_level: Warn,
            desc: "detects invalid `#[doc(...)]` attributes",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #82730 <https://github.com/rust-lang/rust/issues/82730>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DERIVABLE_IMPLS",
            default_level: Warn,
            desc: "manual implementation of the `Default` trait which is equal to a derive",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXTRA_UNUSED_TYPE_PARAMETERS",
            default_level: Warn,
            desc: "unused type parameters in function definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SATURATING_ARITHMETIC",
            default_level: Warn,
            desc: "`.checked_add/sub(x).unwrap_or(MAX/MIN)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_AS_STR",
            default_level: Warn,
            desc: "`as_str` used to call a method on `str` that is also available on `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORGETTING_COPY_TYPES",
            default_level: Warn,
            desc: "calls to `std::mem::forget` with a value that implements Copy",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "USELESS_DEPRECATED",
            default_level: Deny,
            desc: "detects deprecation attributes with no effect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NON_MINIMAL_CFG",
            default_level: Warn,
            desc: "ensure that all `cfg(any())` and `cfg(all())` have more than one condition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEFAULT_INSTEAD_OF_ITER_EMPTY",
            default_level: Warn,
            desc: "check `std::iter::Empty::default()` and replace with `std::iter::empty()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_ELEMENT_LOOP",
            default_level: Warn,
            desc: "there is no reason to have a single element loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PERMISSIONS_SET_READONLY_FALSE",
            default_level: Warn,
            desc: "Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUST_USE_UNIT",
            default_level: Warn,
            desc: "`#[must_use]` attribute on a unit-returning function / method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OK_EXPECT",
            default_level: Warn,
            desc: "using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MIN_MAX",
            default_level: Deny,
            desc: "`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::INVALID_NULL_PTR_USAGE",
            default_level: Deny,
            desc: "invalid usage of a null pointer, suggesting `NonNull::dangling()` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNCONDITIONAL_RECURSION",
            default_level: Warn,
            desc: "functions that cannot return without calling themselves",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IMPLICIT_SATURATING_SUB",
            default_level: Warn,
            desc: "Perform saturating subtraction instead of implicitly checking lower bound of data type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MULTI_ASSIGNMENTS",
            default_level: Warn,
            desc: "instead of using `a = b = c;` use `a = c; b = c;`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INEFFECTIVE_BIT_MASK",
            default_level: Deny,
            desc: "expressions where a bit mask will be rendered useless by a comparison, e.g., `(x | 1) > 2`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "STABLE_FEATURES",
            default_level: Warn,
            desc: "stable features found in `#[feature]` directive",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TYPE_ID_ON_BOX",
            default_level: Warn,
            desc: "calling `.type_id()` on `Box<dyn Any>`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DIVERGING_SUB_EXPRESSION",
            default_level: Warn,
            desc: "whether an expression contains a diverging sub expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_LOCALS",
            default_level: Deny,
            desc: "redundant redefinition of a local binding",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_FLOAT",
            default_level: Warn,
            desc: "transmutes from an integer to a float",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ARRAY_INTO_ITER",
            default_level: Warn,
            desc: "detects calling `into_iter` on arrays in Rust 2015 and 2018",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>",
                    reason: EditionSemanticsChange(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DROP_BOUNDS",
            default_level: Warn,
            desc: "bounds of the form `T: Drop` are most likely incorrect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEMPORARY_CSTRING_AS_PTR",
            default_level: Warn,
            desc: "detects getting the inner pointer of a temporary `CString`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FOUR_FORWARD_SLASHES",
            default_level: Warn,
            desc: "comments with 4 forward slashes (`////`) likely intended to be doc comments (`///`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FOR_LOOPS_OVER_FALLIBLES",
            default_level: Warn,
            desc: "for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_AUTO_DEREF",
            default_level: Warn,
            desc: "dereferencing when the compiler would automatically dereference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PATH_ENDS_WITH_EXT",
            default_level: Warn,
            desc: "attempting to compare file extensions using `Path::ends_with`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNINIT_ASSUMED_INIT",
            default_level: Deny,
            desc: "`MaybeUninit::uninit().assume_init()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DROPPING_COPY_TYPES",
            default_level: Warn,
            desc: "calls to `std::mem::drop` with a value that implements Copy",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DUPLICATE_MACRO_ATTRIBUTES",
            default_level: Warn,
            desc: "duplicated attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEFAULT_CONSTRUCTED_UNIT_STRUCTS",
            default_level: Warn,
            desc: "unit structs can be contructed without calling `default`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INIT_NUMBERED_FIELDS",
            default_level: Warn,
            desc: "numbered fields in tuple struct initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SAME_ITEM_PUSH",
            default_level: Warn,
            desc: "the same item is pushed inside of a for loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INVALID_REGEX",
            default_level: Deny,
            desc: "invalid regular expressions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ELLIPSIS_INCLUSIVE_RANGE_PATTERNS",
            default_level: Warn,
            desc: "`...` range patterns are deprecated",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>",
                    reason: EditionError(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNSTABLE_SYNTAX_PRE_EXPANSION",
            default_level: Warn,
            desc: "unstable syntax can change at any point in the future, causing a hard error!",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #65860 <https://github.com/rust-lang/rust/issues/65860>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NOT_UNSAFE_PTR_ARG_DEREF",
            default_level: Deny,
            desc: "public functions dereferencing raw pointer arguments but not marked `unsafe`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RETAIN",
            default_level: Warn,
            desc: "`retain()` is simpler and the same functionalities",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_TO_OWNED",
            default_level: Warn,
            desc: "unnecessary calls to `to_owned`-like functions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRONG_SELF_CONVENTION",
            default_level: Warn,
            desc: "defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUT_FROM_REF",
            default_level: Deny,
            desc: "fns that create mutable refs from immutable ref args",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FROM_OVER_INTO",
            default_level: Warn,
            desc: "Warns on implementations of `Into<..>` to use `From<..>`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BAD_BIT_MASK",
            default_level: Deny,
            desc: "expressions of the form `_ & mask == select` that will only ever return `true` or `false`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "IRREFUTABLE_LET_PATTERNS",
            default_level: Warn,
            desc: "detects irrefutable patterns in `if let` and `while let` statements",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_TO_NUMERIC_CAST_WITH_TRUNCATION",
            default_level: Warn,
            desc: "casting a function pointer to a numeric type not wide enough to store the address",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_FIELD_NAMES",
            default_level: Warn,
            desc: "checks for fields in struct literals where shorthands could be used",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_BOOL",
            default_level: Warn,
            desc: "transmutes from an integer to a `bool`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PATTERNS_IN_FNS_WITHOUT_BODY",
            default_level: Deny,
            desc: "patterns in functions without body were erroneously allowed",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #35203 <https://github.com/rust-lang/rust/issues/35203>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNGATED_ASYNC_FN_TRACK_CALLER",
            default_level: Warn,
            desc: "enabling track_caller on an async fn is a no-op unless the async_fn_track_caller feature is enabled",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_SINGLE_BINDING",
            default_level: Warn,
            desc: "a match with a single binding instead of using `let` statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INVISIBLE_CHARACTERS",
            default_level: Deny,
            desc: "using an invisible character in a string literal, which is confusing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNREACHABLE_CODE",
            default_level: Warn,
            desc: "detects unreachable code paths",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ENUM_INTRINSICS_NON_ENUMS",
            default_level: Deny,
            desc: "detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ITER_OUT_OF_BOUNDS",
            default_level: Warn,
            desc: "calls to `.take()` or `.skip()` that are out of bounds",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_MAP",
            default_level: Warn,
            desc: "suspicious usage of map",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORGETTING_REFERENCES",
            default_level: Warn,
            desc: "calls to `std::mem::forget` with a reference instead of an owned value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONFLICTING_REPR_HINTS",
            default_level: Deny,
            desc: "conflicts between `#[repr(..)]` hints that were previously accepted and used in practice",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #68585 <https://github.com/rust-lang/rust/issues/68585>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_IMMUTABLE_CONDITION",
            default_level: Deny,
            desc: "variables used within while expression are not mutated in the body",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::JUST_UNDERSCORES_AND_DIGITS",
            default_level: Warn,
            desc: "unclear name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_RANGE_IN_VEC_INIT",
            default_level: Warn,
            desc: "checks for initialization of `Vec` or arrays which consist of a single range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PRIVATE_INTERFACES",
            default_level: Warn,
            desc: "private type in primary interface of an item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TRIVIAL_BOUNDS",
            default_level: Warn,
            desc: "these bounds don't depend on an type parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_SPLITN",
            default_level: Warn,
            desc: "usages of `str::splitn` that can be replaced with `str::split`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SHOULD_IMPLEMENT_TRAIT",
            default_level: Warn,
            desc: "defining a method that should be implementing a std trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CMP_NULL",
            default_level: Warn,
            desc: "comparing a pointer to a null pointer, suggesting to use `.is_null()` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_VEC",
            default_level: Warn,
            desc: "useless `vec!`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PROC_MACRO_BACK_COMPAT",
            default_level: Deny,
            desc: "detects usage of old versions of certain proc-macro crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #83125 <https://github.com/rust-lang/rust/issues/83125>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_FORMAT",
            default_level: Warn,
            desc: "useless use of `format!`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISREFACTORED_ASSIGN_OP",
            default_level: Warn,
            desc: "having a variable on both sides of an assign op",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PARTIALEQ_NE_IMPL",
            default_level: Warn,
            desc: "re-implementing `PartialEq::ne`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VTABLE_ADDRESS_COMPARISONS",
            default_level: Deny,
            desc: "comparison with an address of a trait vtable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNDEFINED_NAKED_FUNCTION_ABI",
            default_level: Warn,
            desc: "undefined naked function ABI",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_TO_NUMERIC_CAST",
            default_level: Warn,
            desc: "casting a function pointer to a numeric type other than usize",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CLONE_ON_COPY",
            default_level: Warn,
            desc: "using `clone` on a `Copy` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REPEAT_ONCE",
            default_level: Warn,
            desc: "using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` ",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_OCTAL_UNIX_PERMISSIONS",
            default_level: Deny,
            desc: "use of non-octal value to set unix file permissions, which will be translated into octal",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_BYTES_TO_STR",
            default_level: Warn,
            desc: "transmutes from a `&[u8]` to a `&str`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "POINTER_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "pointers are not structural-match",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #62411 <https://github.com/rust-lang/rust/issues/70861>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OVERLY_COMPLEX_BOOL_EXPR",
            default_level: Deny,
            desc: "boolean expressions that contain terminals which can be eliminated",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::INFALLIBLE_DESTRUCTURING_MATCH",
            default_level: Warn,
            desc: "a `match` statement with a single infallible arm instead of a `let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SELF_ASSIGNMENT",
            default_level: Deny,
            desc: "explicit self-assignment",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROW",
            default_level: Warn,
            desc: "taking a reference that is going to be automatically dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INTO_ITER_ON_REF",
            default_level: Warn,
            desc: "using `.into_iter()` on a reference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_ATOMIC_ORDERING",
            default_level: Deny,
            desc: "usage of invalid atomic ordering in atomic operations and memory fences",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MISMATCHED_TARGET_OS",
            default_level: Deny,
            desc: "usage of `cfg(operating_system)` instead of `cfg(target_os = \"operating_system\")`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DROPPING_REFERENCES",
            default_level: Warn,
            desc: "calls to `std::mem::drop` with a reference instead of an owned value",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_CRATE_TYPES",
            default_level: Deny,
            desc: "unknown crate type found in `#[crate_type]` directive",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MUT_RANGE_BOUND",
            default_level: Warn,
            desc: "for loop over a range where one of the bounds is a mutable variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ANONYMOUS_PARAMETERS",
            default_level: Warn,
            desc: "detects anonymous parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #41686 <https://github.com/rust-lang/rust/issues/41686>",
                    reason: EditionError(
                        Edition2018,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TYPE_ALIAS_BOUNDS",
            default_level: Warn,
            desc: "bounds in type aliases are not enforced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MAP_UNIT_FN",
            default_level: Warn,
            desc: "`Iterator::map` call that discard the iterator's values",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TOO_MANY_ARGUMENTS",
            default_level: Warn,
            desc: "functions with too many arguments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INFINITE_ITER",
            default_level: Deny,
            desc: "infinite iteration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MAIN_RECURSION",
            default_level: Warn,
            desc: "recursion using the entrypoint",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SPLIT_ONCE",
            default_level: Warn,
            desc: "replace `.splitn(2, pat)` with `.split_once(pat)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_ARG",
            default_level: Warn,
            desc: "fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PATH_STATEMENTS",
            default_level: Warn,
            desc: "path statements with no effect",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASYNC_YIELDS_ASYNC",
            default_level: Deny,
            desc: "async blocks that return a type that can be awaited",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BOXED_LOCAL",
            default_level: Warn,
            desc: "using `Box<T>` where unnecessary",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASSIGN_OP_PATTERN",
            default_level: Warn,
            desc: "assigning the result of an operation on a variable to that same variable",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FN_ADDRESS_COMPARISONS",
            default_level: Deny,
            desc: "comparison with an address of a function item",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "SUSPICIOUS_AUTO_TRAIT_IMPLS",
            default_level: Warn,
            desc: "the rules governing auto traits have recently changed resulting in potential breakage",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #93367 <https://github.com/rust-lang/rust/issues/93367>",
                    reason: FutureReleaseSemanticsChange,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPECT_FUN_CALL",
            default_level: Warn,
            desc: "using any `expect` method with a function call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RANGE_ZIP_WITH_LEN",
            default_level: Warn,
            desc: "zipping iterator with a range when `enumerate()` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_OPERATION",
            default_level: Warn,
            desc: "outer expressions with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_INT_TO_CHAR",
            default_level: Warn,
            desc: "transmutes from an integer to a `char`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_GLOB_REEXPORTS",
            default_level: Warn,
            desc: "ambiguous glob re-exports",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MUTABLE_TRANSMUTES",
            default_level: Deny,
            desc: "transmuting &T to &mut T is undefined behavior, even if the reference is unused",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NONMINIMAL_BOOL",
            default_level: Warn,
            desc: "boolean expressions that can be written more concisely",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IFS_SAME_COND",
            default_level: Deny,
            desc: "consecutive `if`s with the same condition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WILDCARD_IN_OR_PATTERNS",
            default_level: Warn,
            desc: "a wildcard pattern used with others patterns in same match arm",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_EQ",
            default_level: Warn,
            desc: "use `std::ptr::eq` when comparing raw pointers",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CENUM_IMPL_DROP_CAST",
            default_level: Deny,
            desc: "a C-like enum implementing Drop is cast",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #73333 <https://github.com/rust-lang/rust/issues/73333>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "NON_FMT_PANICS",
            default_level: Warn,
            desc: "detect single-argument panic!() invocations in which the argument is not a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "",
                    reason: EditionSemanticsChange(
                        Edition2021,
                    ),
                    explain_reason: false,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_MAP_BOOL_THEN",
            default_level: Warn,
            desc: "checks for usage of `bool::then` in `Iterator::filter_map`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FIND_MAP",
            default_level: Warn,
            desc: "using `find_map` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_LABELS",
            default_level: Warn,
            desc: "detects labels that are never used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEPRECATED_CFG_ATTR",
            default_level: Warn,
            desc: "usage of `cfg_attr(rustfmt)` instead of tool attributes",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OUT_OF_BOUNDS_INDEXING",
            default_level: Deny,
            desc: "out of bounds constant indexing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEVER_LOOP",
            default_level: Deny,
            desc: "any loop that will always `break` or `return`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "MISSING_FRAGMENT_SPECIFIER",
            default_level: Deny,
            desc: "detects missing fragment specifiers in unused `macro_rules!` patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #40107 <https://github.com/rust-lang/rust/issues/40107>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EXCESSIVE_NESTING",
            default_level: Warn,
            desc: "checks for blocks nested beyond a certain threshold",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INT_PLUS_ONE",
            default_level: Warn,
            desc: "instead of using `x >= y + 1`, use `x > y`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_STR_REPEAT",
            default_level: Warn,
            desc: "manual implementation of `str::repeat`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_LITERAL_UNWRAP",
            default_level: Warn,
            desc: "using `unwrap()` related calls on `Result` and `Option` constructors",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNREACHABLE_PATTERNS",
            default_level: Warn,
            desc: "detects unreachable patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_WRITE",
            default_level: Warn,
            desc: "using the `write!()` family of functions instead of the `print!()` family of functions, when using the latter would work",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_WITH_DEFAULT",
            default_level: Warn,
            desc: "replacing a value of type `T` with `T::default()` instead of using `std::mem::take`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_ENFORCED_IMPORT_RENAMES",
            default_level: Warn,
            desc: "enforce import renames",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_ARG",
            default_level: Warn,
            desc: "passing unit to a function",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_CAST",
            default_level: Warn,
            desc: "cast to the same type, e.g., `x as i32` where `x: i32`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_FORMAT_SPECS",
            default_level: Warn,
            desc: "use of a format specifier that has no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OR_THEN_UNWRAP",
            default_level: Warn,
            desc: "checks for `.or(…).unwrap()` calls to Options and Results.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_PTR_TO_REF",
            default_level: Warn,
            desc: "transmutes from a pointer to a reference type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_CAMEL_CASE_TYPES",
            default_level: Warn,
            desc: "types, variants, traits and type parameters should have camel case names",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PRIVATE_BOUNDS",
            default_level: Warn,
            desc: "private type in secondary interface of an item",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NO_MANGLE_GENERIC_ITEMS",
            default_level: Warn,
            desc: "generic items must be mangled",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOOL_ASSERT_COMPARISON",
            default_level: Warn,
            desc: "Using a boolean as comparison value in an assert_* macro when there is no need",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEW_WITHOUT_DEFAULT",
            default_level: Warn,
            desc: "`pub fn new() -> Self` method without `Default` implementation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_HASH_ONE",
            default_level: Warn,
            desc: "manual implementations of `BuildHasher::hash_one`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_SKIP_ZERO",
            default_level: Deny,
            desc: "disallows `.skip(0)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FILTER_MAP",
            default_level: Warn,
            desc: "using `filter_map` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INEFFECTIVE_UNSTABLE_TRAIT_IMPL",
            default_level: Deny,
            desc: "detects `#[unstable]` on stable trait implementations for stable types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "CLASHING_EXTERN_DECLARATIONS",
            default_level: Warn,
            desc: "detects when an extern fn has been declared with the same name but different types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BLANKET_CLIPPY_RESTRICTION_LINTS",
            default_level: Warn,
            desc: "enabling the complete restriction group",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FOR_KV_MAP",
            default_level: Warn,
            desc: "looping on a map using `iter` when `keys` or `values` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_CANONICAL_PARTIAL_ORD_IMPL",
            default_level: Warn,
            desc: "non-canonical implementation of `PartialOrd` on an `Ord` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NONTRIVIAL_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #73448 <https://github.com/rust-lang/rust/issues/73448>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPROPER_CTYPES_DEFINITIONS",
            default_level: Warn,
            desc: "proper use of libc types in foreign item definitions",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_REFERENCE_CASTING",
            default_level: Deny,
            desc: "casts of `&T` to `&mut T` without interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_SPLITN",
            default_level: Deny,
            desc: "checks for `.splitn(0, ..)` and `.splitn(1, ..)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ONLY_USED_IN_RECURSION",
            default_level: Warn,
            desc: "arguments that is only used in recursion can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_MAP_UNIT_FN",
            default_level: Warn,
            desc: "using `result.map(f)`, where `f` is a function or closure that returns `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_WITH_UNINIT",
            default_level: Deny,
            desc: "`mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_CMP",
            default_level: Deny,
            desc: "comparing unit values",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NONSENSICAL_OPEN_OPTIONS",
            default_level: Deny,
            desc: "nonsensical combination of options for opening a file",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NO_EFFECT",
            default_level: Warn,
            desc: "statements with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CROSSPOINTER_TRANSMUTE",
            default_level: Warn,
            desc: "transmutes that have to or from types that are a pointer to the other",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_LINTS",
            default_level: Warn,
            desc: "unrecognized lint attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NO_MANGLE_CONST_ITEMS",
            default_level: Deny,
            desc: "const items will not have their symbols exported",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BLOCKS_IN_IF_CONDITIONS",
            default_level: Warn,
            desc: "useless or complex blocks that can be eliminated in conditions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_LITERAL",
            default_level: Warn,
            desc: "printing a literal with a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_PARENS",
            default_level: Warn,
            desc: "`if`, `match`, `while` and `return` do not need parentheses",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_PARENS",
            default_level: Warn,
            desc: "Warn on unnecessary double parentheses",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LARGE_CONST_ARRAYS",
            default_level: Warn,
            desc: "large non-scalar const array may cause performance overhead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORMAT_COLLECT",
            default_level: Warn,
            desc: "`format!`ing every element in a collection, then collecting the strings into a new `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_FOLD",
            default_level: Warn,
            desc: "using `fold` when a more succinct alternative exists",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEREF_INTO_DYN_SUPERTRAIT",
            default_level: Warn,
            desc: "`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #89460 <https://github.com/rust-lang/rust/issues/89460>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEPRECATED_WHERE_CLAUSE_LOCATION",
            default_level: Warn,
            desc: "deprecated where clause location",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXCESSIVE_PRECISION",
            default_level: Warn,
            desc: "excessive precision for float literal",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_LET_ON_ITERATOR",
            default_level: Warn,
            desc: "using a `while let` loop instead of a for loop on an iterator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NON_CANONICAL_CLONE_IMPL",
            default_level: Warn,
            desc: "non-canonical implementation of `Clone` on a `Copy` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TABS_IN_DOC_COMMENTS",
            default_level: Warn,
            desc: "using tabs in doc comments is not recommended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INCOMPLETE_FEATURES",
            default_level: Warn,
            desc: "incomplete features that may function improperly in some or all cases",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REDUNDANT_SEMICOLONS",
            default_level: Warn,
            desc: "detects unnecessary trailing semicolons",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "HIDDEN_GLOB_REEXPORTS",
            default_level: Warn,
            desc: "name introduced by a private item shadows a name introduced by a public glob re-export",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPROPER_CTYPES",
            default_level: Warn,
            desc: "proper use of libc types in foreign modules",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_FROM_UTF8",
            default_level: Warn,
            desc: "using a non UTF-8 literal in `std::str::from_utf8`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_TO_OWNED",
            default_level: Warn,
            desc: "calls to `to_owned` on a `Cow<'_, _>` might not do what they are expected",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_MAP_UNIT_FN",
            default_level: Warn,
            desc: "using `option.map(f)`, where `f` is a function or closure that returns `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MEM_REPLACE_OPTION_WITH_NONE",
            default_level: Warn,
            desc: "replacing an `Option` with `None` instead of `take()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ABSURD_EXTREME_COMPARISONS",
            default_level: Deny,
            desc: "a comparison with a maximum or minimum value that is always true or false",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNIT_VALUE",
            default_level: Warn,
            desc: "creating a `let` binding to a value of unit type, which usually can't be used afterwards",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WHERE_CLAUSES_OBJECT_SAFETY",
            default_level: Warn,
            desc: "checks the object safety of where clauses",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #51443 <https://github.com/rust-lang/rust/issues/51443>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CHARS_NEXT_CMP",
            default_level: Warn,
            desc: "using `.chars().next()` to check if a string starts with a char",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUT_MUTEX_LOCK",
            default_level: Warn,
            desc: "`&mut Mutex::lock` does unnecessary locking",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEG_CMP_OP_ON_PARTIAL_ORD",
            default_level: Warn,
            desc: "The use of negated comparison operators on partially ordered types may produce confusing code.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS",
            default_level: Warn,
            desc: "transmutes that could be a pointer cast",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LATE_BOUND_LIFETIME_ARGUMENTS",
            default_level: Warn,
            desc: "detects generic lifetime arguments in path segments with late bound lifetime parameters",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #42868 <https://github.com/rust-lang/rust/issues/42868>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_AS_REF",
            default_level: Warn,
            desc: "a `match` on an Option value instead of using `as_ref()` or `as_mut`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MODULO_ONE",
            default_level: Deny,
            desc: "taking a number modulo +/-1, which can either panic/overflow or always returns 0",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OVERLAPPING_RANGE_ENDPOINTS",
            default_level: Warn,
            desc: "detects range patterns with overlapping endpoints",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_ASREF",
            default_level: Warn,
            desc: "using `as_ref` where the types before and after the call are the same",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INCOMPLETE_INCLUDE",
            default_level: Deny,
            desc: "trailing content in included file",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "ASYNC_FN_IN_TRAIT",
            default_level: Warn,
            desc: "use of `async fn` in definition of a publicly-reachable trait",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ENUM_CLIKE_UNPORTABLE_VARIANT",
            default_level: Deny,
            desc: "C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::RECURSIVE_FORMAT_IMPL",
            default_level: Deny,
            desc: "Format trait method called while implementing the same Format trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EMPTY_LOOP",
            default_level: Warn,
            desc: "empty `loop {}`, which should block or sleep",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_FROM_UTF8_UNCHECKED",
            default_level: Deny,
            desc: "using a non UTF-8 literal in `std::str::from_utf8_unchecked`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "USELESS_PTR_NULL_CHECKS",
            default_level: Warn,
            desc: "useless checking of non-null-typed pointer",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_NAN_COMPARISONS",
            default_level: Warn,
            desc: "detects invalid floating point NaN comparisons",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_SNAKE_CASE",
            default_level: Warn,
            desc: "variables, methods, functions, lifetime parameters and modules should have snake case names",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COMPARISON_CHAIN",
            default_level: Warn,
            desc: "`if`s that can be rewritten with `match` and `cmp`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_COUNT",
            default_level: Warn,
            desc: "replace `.iter().count()` with `.len()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_OVEREAGER_CLONED",
            default_level: Warn,
            desc: "using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_COMPONENT_PATH_IMPORTS",
            default_level: Warn,
            desc: "imports with single component path are redundant",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_DOC_COMMENTS",
            default_level: Warn,
            desc: "suspicious usage of (outer) doc comments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_RANGE_PATTERNS",
            default_level: Warn,
            desc: "manually writing range patterns using a combined OR pattern (`|`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OCTAL_ESCAPES",
            default_level: Warn,
            desc: "string escape sequences looking like octal characters",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_PUB_SELF",
            default_level: Warn,
            desc: "checks for usage of `pub(self)` and `pub(in self)`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SEMICOLON_IN_EXPRESSIONS_FROM_MACROS",
            default_level: Warn,
            desc: "trailing semicolon in macro body used as expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #79813 <https://github.com/rust-lang/rust/issues/79813>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEARCH_IS_SOME",
            default_level: Warn,
            desc: "using an iterator or string search followed by `is_some()` or `is_none()`, which is more succinctly expressed as a call to `any()` or `contains()` (with negation in case of `is_none()`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_QUESTION_MARK",
            default_level: Warn,
            desc: "Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_TRANSMUTE",
            default_level: Warn,
            desc: "transmutes that have the same to and from types or could be a cast/coercion",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_PATTERNS_WITHOUT_PARTIAL_EQ",
            default_level: Warn,
            desc: "constant in pattern does not implement `PartialEq`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #116122 <https://github.com/rust-lang/rust/issues/116122>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TYVAR_BEHIND_RAW_POINTER",
            default_level: Warn,
            desc: "raw pointer to an inference variable",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #46906 <https://github.com/rust-lang/rust/issues/46906>",
                    reason: EditionError(
                        Edition2018,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CHARS_LAST_CMP",
            default_level: Warn,
            desc: "using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::READ_LINE_WITHOUT_TRIM",
            default_level: Deny,
            desc: "calling `Stdin::read_line`, then trying to parse it without first trimming",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_OWNED_EMPTY_STRINGS",
            default_level: Warn,
            desc: "detects cases of references to owned empty strings being passed as an argument to a function expecting `&str`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEPRECATED_SEMVER",
            default_level: Deny,
            desc: "use of `#[deprecated(since = \"x\")]` where x is not semver",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MAP_ENTRY",
            default_level: Warn,
            desc: "use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXPLICIT_COUNTER_LOOP",
            default_level: Warn,
            desc: "for-looping with an explicit counter when `_.enumerate()` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNFULFILLED_LINT_EXPECTATIONS",
            default_level: Warn,
            desc: "unfulfilled lint expectation",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "lint_reasons",
            ),
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::APPROX_CONSTANT",
            default_level: Deny,
            desc: "the approximate of a known float constant (in `std::fXX::consts`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IMPLICIT_SATURATING_ADD",
            default_level: Warn,
            desc: "Perform saturating addition instead of implicitly checking max bound of data type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LINES_FILTER_MAP_OK",
            default_level: Warn,
            desc: "filtering `std::io::Lines` with `filter_map()` or `flat_map()` might cause an infinite loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_STR_REPLACE",
            default_level: Warn,
            desc: "collapse consecutive calls to str::replace (2 or more) into a single call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRITELN_EMPTY_STRING",
            default_level: Warn,
            desc: "using `writeln!(buf, \"\")` with an empty string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_BRACES",
            default_level: Warn,
            desc: "unnecessary braces around an expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_IF",
            default_level: Warn,
            desc: "checks for empty if branches",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TYPE_COMPLEXITY",
            default_level: Warn,
            desc: "usage of very complex types that might be better factored into `type` definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "TEST_UNSTABLE_LINT",
            default_level: Deny,
            desc: "this unstable lint is only for testing",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "test_unstable_lint",
            ),
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FLAT_MAP_IDENTITY",
            default_level: Warn,
            desc: "call to `flat_map` where `flatten` is sufficient",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_CLONE",
            default_level: Warn,
            desc: "using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_PARENS_ON_RANGE_LITERALS",
            default_level: Warn,
            desc: "needless parenthesis on range literals can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRONG_TRANSMUTE",
            default_level: Deny,
            desc: "transmutes that are confusing at best, undefined behavior at worst and always useless",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "INTERNAL_FEATURES",
            default_level: Warn,
            desc: "internal features are not supposed to be used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LONG_RUNNING_CONST_EVAL",
            default_level: Deny,
            desc: "detects long const eval operations",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::IF_SAME_THEN_ELSE",
            default_level: Warn,
            desc: "`if` with the same `then` and `else` blocks",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_OVERLAPPING_ARM",
            default_level: Warn,
            desc: "a `match` with overlapping arms",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_CONVERSION",
            default_level: Warn,
            desc: "calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_PTR",
            default_level: Warn,
            desc: "using `0 as *{const, mut} T`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_CLONED_COLLECT",
            default_level: Warn,
            desc: "using `.cloned().collect()` on slice to create a `Vec`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_TRY_FOLD",
            default_level: Warn,
            desc: "checks for usage of `Iterator::fold` with a type that implements `Try`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PROC_MACRO_DERIVE_RESOLUTION_FALLBACK",
            default_level: Deny,
            desc: "detects proc macro derives using inaccessible names from parent modules",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #83583 <https://github.com/rust-lang/rust/issues/83583>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::USELESS_ATTRIBUTE",
            default_level: Deny,
            desc: "use of lint attributes on `extern crate` items",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FIELD_REASSIGN_WITH_DEFAULT",
            default_level: Warn,
            desc: "binding initialized with Default should have its fields set in the initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WHILE_LET_LOOP",
            default_level: Warn,
            desc: "`loop { if let { ... } else break }`, which can be written as a `while let` loop",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_GUARDS",
            default_level: Warn,
            desc: "checks for unnecessary guards in match expressions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ORDER_DEPENDENT_TRAIT_OBJECTS",
            default_level: Deny,
            desc: "trait-object types were treated as different depending on marker-trait order",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #56484 <https://github.com/rust-lang/rust/issues/56484>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OVERFLOWING_LITERALS",
            default_level: Deny,
            desc: "literal out of range for its type",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FROM_STR_RADIX_10",
            default_level: Warn,
            desc: "from_str_radix with radix 10",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BYTES_NTH",
            default_level: Warn,
            desc: "replace `.bytes().nth()` with `.as_bytes().get()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BINDINGS_WITH_VARIANT_NAME",
            default_level: Deny,
            desc: "detects pattern bindings with the same name as one of the matched variants",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_INVALID_TYPE",
            default_level: Warn,
            desc: "holding a type across an await point which is not allowed to be held as per the configuration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INLINE_FN_WITHOUT_BODY",
            default_level: Deny,
            desc: "use of `#[inline]` on trait methods without bodies",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_ELSE",
            default_level: Warn,
            desc: "empty else branch",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ARITHMETIC_OVERFLOW",
            default_level: Deny,
            desc: "arithmetic operation overflows",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_IN_FORMAT_IMPL",
            default_level: Warn,
            desc: "use of a print macro in a formatting trait impl",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BORROWED_REFERENCE",
            default_level: Warn,
            desc: "destructuring a reference and borrowing the inner value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRLEN_ON_C_STRINGS",
            default_level: Warn,
            desc: "using `libc::strlen` on a `CString` or `CStr` value, while `as_bytes().len()` or `to_bytes().len()` respectively can be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "COINDUCTIVE_OVERLAP_IN_COHERENCE",
            default_level: Deny,
            desc: "impls that are not considered to overlap may be considered to overlap in the future",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #114040 <https://github.com/rust-lang/rust/issues/114040>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "NON_UPPER_CASE_GLOBALS",
            default_level: Warn,
            desc: "static constants should have uppercase identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CMP_OWNED",
            default_level: Warn,
            desc: "creating owned instances for comparing with others, e.g., `x == \"foo\".to_string()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ALLOCATION",
            default_level: Warn,
            desc: "detects unnecessary allocations that can be eliminated",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_NAN_TO_INT",
            default_level: Warn,
            desc: "casting a known floating-point NaN into an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DRAIN_COLLECT",
            default_level: Warn,
            desc: "calling `.drain(..).collect()` to move all elements into a new collection",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRING_EXTEND_CHARS",
            default_level: Warn,
            desc: "using `x.extend(s.chars())` where s is a `&str` or `String`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRIM_SPLIT_WHITESPACE",
            default_level: Warn,
            desc: "using `str::trim()` or alike before `str::split_whitespace`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "LEGACY_DERIVE_HELPERS",
            default_level: Warn,
            desc: "detects derive helper attributes that are used before they are introduced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #79202 <https://github.com/rust-lang/rust/issues/79202>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NEXT_LOOP",
            default_level: Deny,
            desc: "for-looping over `_.next()` which is probably not intended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FILTER",
            default_level: Warn,
            desc: "reimplementation of `filter`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_ASSOCIATED_ITEMS",
            default_level: Deny,
            desc: "ambiguous associated items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #57644 <https://github.com/rust-lang/rust/issues/57644>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNUSED_COMPARISONS",
            default_level: Warn,
            desc: "comparisons made useless by limits of the types involved",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_TYPES",
            default_level: Warn,
            desc: "use of disallowed types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_IDENTITY",
            default_level: Warn,
            desc: "using iterator.map(|x| x)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SHORT_CIRCUIT_STATEMENT",
            default_level: Warn,
            desc: "using a short circuit boolean condition as a statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_REFCELL_REF",
            default_level: Warn,
            desc: "inside an async function, holding a `RefCell` ref while calling `await`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_DOCTEST_MAIN",
            default_level: Warn,
            desc: "presence of `fn main() {` in code examples",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_AT_REST_PATTERN",
            default_level: Warn,
            desc: "checks for `[all @ ..]` where `all` would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_ALLOCATION",
            default_level: Warn,
            desc: "redundant allocation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "EXPORTED_PRIVATE_DEPENDENCIES",
            default_level: Warn,
            desc: "public interface leaks type from a private dependency",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROW_DEREF_REF",
            default_level: Warn,
            desc: "deref on an immutable reference returns the same type as itself",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::GET_FIRST",
            default_level: Warn,
            desc: "Using `x.get(0)` when `x.first()` is simpler",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FIND_MAP",
            default_level: Warn,
            desc: "using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_VARIABLES",
            default_level: Warn,
            desc: "detect variables which are not used in any way",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_REF_PATS",
            default_level: Warn,
            desc: "a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PANICKING_UNWRAP",
            default_level: Deny,
            desc: "checks for calls of `unwrap[_err]()` that will always fail",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::WRITE_WITH_NEWLINE",
            default_level: Warn,
            desc: "using `write!()` with a format string that ends in a single newline",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_BITS",
            default_level: Warn,
            desc: "manual implementation of `size_of::<T>() * 8` can be simplified with `T::BITS`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EXTEND_WITH_DRAIN",
            default_level: Warn,
            desc: "using vec.append(&mut vec) to move the full range of a vector to another",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_NEXT_BACK",
            default_level: Warn,
            desc: "manual reverse iteration of `DoubleEndedIterator`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MAP",
            default_level: Warn,
            desc: "reimplementation of `map`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ASSOCIATED_TYPE_BOUNDS",
            default_level: Warn,
            desc: "detects unused `Foo = Bar` bounds in `dyn Trait<Foo = Bar>`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_VALUE",
            default_level: Warn,
            desc: "an invalid value is being created (such as a null reference)",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SUSPICIOUS_DOUBLE_REF_OP",
            default_level: Warn,
            desc: "suspicious call of trait method on `&&T`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_NAMES",
            default_level: Warn,
            desc: "usage of a disallowed/placeholder name",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_MAP_IDENTITY",
            default_level: Warn,
            desc: "call to `filter_map` where `flatten` is sufficient",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONST_EVALUATABLE_UNCHECKED",
            default_level: Warn,
            desc: "detects a generic constant is used in a type without a emitting a warning",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #76200 <https://github.com/rust-lang/rust/issues/76200>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::AWAIT_HOLDING_LOCK",
            default_level: Warn,
            desc: "inside an async function, holding a `MutexGuard` while calling `await`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNEEDED_WILDCARD_PATTERN",
            default_level: Warn,
            desc: "tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROWED_BOX",
            default_level: Warn,
            desc: "a borrow of a boxed type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VEC_INIT_THEN_PUSH",
            default_level: Warn,
            desc: "`push` immediately after `Vec` creation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ARC_WITH_NON_SEND_SYNC",
            default_level: Warn,
            desc: "using `Arc` with a type that does not implement `Send` and `Sync`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITEMS_AFTER_TEST_MODULE",
            default_level: Warn,
            desc: "An item was found after the testing module `tests`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FILTER_MAP",
            default_level: Warn,
            desc: "using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_ASYNC_BLOCK",
            default_level: Warn,
            desc: "`async { future.await }` can be replaced by `future`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "COHERENCE_LEAK_CHECK",
            default_level: Warn,
            desc: "distinct impls distinguished only by the leak-check code",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #56105 <https://github.com/rust-lang/rust/issues/56105>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IDENTITY_OP",
            default_level: Warn,
            desc: "using identity operations, e.g., `x + 0` or `y / 1`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_UNWRAP",
            default_level: Warn,
            desc: "checks for calls of `unwrap[_err]()` that cannot fail",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UPPER_CASE_ACRONYMS",
            default_level: Warn,
            desc: "capitalized acronyms are against the naming convention",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_MACROS",
            default_level: Warn,
            desc: "detects macros that were not used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_SLICE_FROM_RAW_PARTS",
            default_level: Warn,
            desc: "casting a slice created from a pointer and length to a slice pointer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PARTIALEQ_TO_NONE",
            default_level: Warn,
            desc: "Binary comparison to `Option<T>::None` relies on `T: PartialEq`, which is unneeded",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNCONDITIONAL_PANIC",
            default_level: Deny,
            desc: "operation will cause a panic at runtime",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ASSIGNMENT_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of `*=`, `-=` or `!=`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNSAFE_REMOVED_FROM_NAME",
            default_level: Warn,
            desc: "`unsafe` removed from API names on import",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNKNOWN_OR_MALFORMED_DIAGNOSTIC_ATTRIBUTES",
            default_level: Warn,
            desc: "unrecognized or malformed diagnostic attribute",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: Some(
                "diagnostic_namespace",
            ),
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NOOP_METHOD_CALL",
            default_level: Warn,
            desc: "detects the use of well-known noop methods",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_METHODS",
            default_level: Warn,
            desc: "use of a disallowed method call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LARGE_ENUM_VARIANT",
            default_level: Warn,
            desc: "large size difference between variants on an enum",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INSPECT_FOR_EACH",
            default_level: Warn,
            desc: "using `.inspect().for_each()`, which can be replaced with `.for_each()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TOPLEVEL_REF_ARG",
            default_level: Warn,
            desc: "an entire binding declared as `ref`, in a function argument or a `let` statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNSUPPORTED_CALLING_CONVENTIONS",
            default_level: Warn,
            desc: "use of unsupported calling convention",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #87678 <https://github.com/rust-lang/rust/issues/87678>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FROM_RAW_WITH_VOID_PTR",
            default_level: Warn,
            desc: "creating a `Box` from a void raw pointer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_PATTERN",
            default_level: Warn,
            desc: "using `name @ _` in a pattern",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_IO_AMOUNT",
            default_level: Deny,
            desc: "unused written/read amount",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "LARGE_ASSIGNMENTS",
            default_level: Warn,
            desc: "detects large moves or copies",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BYTES_COUNT_TO_LEN",
            default_level: Warn,
            desc: "Using `bytes().count()` when `len()` performs the same functionality",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_FLATTEN",
            default_level: Warn,
            desc: "using combinations of `flatten` and `map` which can usually be written as a single method call",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PTR_OFFSET_WITH_CAST",
            default_level: Warn,
            desc: "unneeded pointer offset cast",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "SOFT_UNSTABLE",
            default_level: Deny,
            desc: "a feature gate that doesn't break dependent crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #64266 <https://github.com/rust-lang/rust/issues/64266>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNUSED_MUST_USE",
            default_level: Warn,
            desc: "unused result of a type flagged as `#[must_use]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_MATCH",
            default_level: Warn,
            desc: "a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FLOAT_EQUALITY_WITHOUT_ABS",
            default_level: Warn,
            desc: "float equality check without `.abs()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SIZE_OF_IN_ELEMENT_COUNT",
            default_level: Deny,
            desc: "using `size_of::<T>` or `size_of_val::<T>` where a count of elements of `T` is expected",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "BARE_TRAIT_OBJECTS",
            default_level: Warn,
            desc: "suggest using `dyn Trait` for trait objects",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>",
                    reason: EditionError(
                        Edition2021,
                    ),
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::GET_LAST_WITH_LEN",
            default_level: Warn,
            desc: "Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_COMMAND_ARG_SPACE",
            default_level: Warn,
            desc: "single command line argument that looks like it should be multiple arguments",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::STRING_FROM_UTF8_AS_BYTES",
            default_level: Warn,
            desc: "casting string slices to byte slices and back",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_DIVIDED_BY_ZERO",
            default_level: Warn,
            desc: "usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "PUB_USE_OF_PRIVATE_EXTERN_CRATE",
            default_level: Deny,
            desc: "detect public re-exports of private extern crates",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #34537 <https://github.com/rust-lang/rust/issues/34537>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RANGE_LOOP",
            default_level: Warn,
            desc: "for-looping over a range of indices where an iterator over items would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_SLICING",
            default_level: Warn,
            desc: "redundant slicing of the whole range of a type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ASSIGNMENTS",
            default_level: Warn,
            desc: "detect assignments that will never be read",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DISALLOWED_MACROS",
            default_level: Warn,
            desc: "use of a disallowed macro",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISTYPED_LITERAL_SUFFIXES",
            default_level: Deny,
            desc: "mistyped literal suffix",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_FINITE",
            default_level: Warn,
            desc: "use dedicated method to check if a float is finite",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::WRITE_LITERAL",
            default_level: Warn,
            desc: "writing a literal with a format string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISSING_SAFETY_DOC",
            default_level: Warn,
            desc: "`pub unsafe fn` without `# Safety` docs",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_ASCII_CHECK",
            default_level: Warn,
            desc: "use dedicated method to check ascii range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_RESULT_OK",
            default_level: Warn,
            desc: "usage of `ok()` in `let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BUILTIN_TYPE_SHADOW",
            default_level: Warn,
            desc: "shadowing a builtin type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NAMED_ARGUMENTS_USED_POSITIONALLY",
            default_level: Warn,
            desc: "named arguments in format used positionally",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SKIP_WHILE_NEXT",
            default_level: Warn,
            desc: "using `skip_while(p).next()`, which is more succinctly expressed as `.find(!p)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_MAP_ON_CONSTRUCTOR",
            default_level: Warn,
            desc: "using `map`/`map_err` on `Option` or `Result` constructors",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_DOC_COMMENTS",
            default_level: Warn,
            desc: "detects doc comments that aren't used by rustdoc",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEREF_NULLPTR",
            default_level: Warn,
            desc: "detects when an null pointer is dereferenced",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_NON_EXHAUSTIVE",
            default_level: Warn,
            desc: "manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ERASING_OP",
            default_level: Deny,
            desc: "using erasing operations, e.g., `x * 0` or `y & 0`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::SERDE_API_MISUSE",
            default_level: Deny,
            desc: "various things that will negatively affect your serde experience",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNIT_RETURN_EXPECTING_ORD",
            default_level: Deny,
            desc: "fn arguments of type Fn(...) -> Ord returning the unit type ().",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "SPECIAL_MODULE_NAME",
            default_level: Warn,
            desc: "module declarations for files with a special meaning",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FUNCTION_ITEM_REFERENCES",
            default_level: Warn,
            desc: "suggest casting to a function pointer when attempting to take references to function items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_NULL_TO_FN",
            default_level: Deny,
            desc: "transmute results in a null function pointer, which is undefined behavior",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS",
            default_level: Deny,
            desc: "macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #52234 <https://github.com/rust-lang/rust/issues/52234>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MEMCPY",
            default_level: Warn,
            desc: "manually copying items between slices",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MATCH_STR_CASE_MISMATCH",
            default_level: Deny,
            desc: "creation of a case altering match expression with non-compliant arms",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DEPRECATED",
            default_level: Warn,
            desc: "detects use of deprecated items",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOX_DEFAULT",
            default_level: Warn,
            desc: "Using Box::new(T::default()) instead of Box::default()",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_IS_INFINITE",
            default_level: Warn,
            desc: "use dedicated method to check if a float is infinite",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MAP_COLLECT_RESULT_UNIT",
            default_level: Warn,
            desc: "using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BORROW_INTERIOR_MUTABLE_CONST",
            default_level: Warn,
            desc: "referencing `const` with interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORGET_NON_DROP",
            default_level: Warn,
            desc: "call to `std::mem::forget` with a value which does not implement `Drop`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_MAIN_SEPARATOR_STR",
            default_level: Warn,
            desc: "`&std::path::MAIN_SEPARATOR.to_string()` can be replaced by `std::path::MAIN_SEPARATOR_STR`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ZERO_PREFIXED_LITERAL",
            default_level: Warn,
            desc: "integer literals starting with `0`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRECEDENCE",
            default_level: Warn,
            desc: "operations where precedence may be unclear",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::VEC_BOX",
            default_level: Warn,
            desc: "usage of `Vec<Box<T>>` where T: Sized, vector elements are already on the heap",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_IMPORTS",
            default_level: Warn,
            desc: "imports that are never used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_UNARY_OP_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of unary `-` or `!` on the RHS of a BinOp",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IF_LET_MUTEX",
            default_level: Deny,
            desc: "locking a `Mutex` in an `if let` block can cause deadlocks",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::FILTER_NEXT",
            default_level: Warn,
            desc: "using `filter(p).next()`, which is more succinctly expressed as `.find(p)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNINIT_VEC",
            default_level: Deny,
            desc: "Vec with uninitialized data",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::PRINTLN_EMPTY_STRING",
            default_level: Warn,
            desc: "using `println!(\"\")` with an empty string",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "AMBIGUOUS_GLOB_IMPORTS",
            default_level: Warn,
            desc: "detects certain glob imports that require reporting an ambiguity error",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #114095 <https://github.com/rust-lang/rust/issues/114095>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_ASYNC_FN",
            default_level: Warn,
            desc: "manual implementations of `async` functions can be simplified using the dedicated syntax",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OP_REF",
            default_level: Warn,
            desc: "taking a reference to satisfy the type constraints on `==`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SELF_NAMED_CONSTRUCTORS",
            default_level: Warn,
            desc: "method should not have the same name as the type it is implemented for",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TEMPORARY_ASSIGNMENT",
            default_level: Warn,
            desc: "assignments to temporaries",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BREAK_WITH_LABEL_AND_LOOP",
            default_level: Warn,
            desc: "`break` expression with label and unlabeled loop as value expression",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ABS_TO_UNSIGNED",
            default_level: Warn,
            desc: "casting the result of `abs()` to an unsigned integer can panic",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_SKIP_NEXT",
            default_level: Warn,
            desc: "using `.skip(x).next()` on an iterator",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEEK_TO_START_INSTEAD_OF_REWIND",
            default_level: Warn,
            desc: "jumping to the start of stream using `seek` method",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_ARBITRARY_SELF_TYPE",
            default_level: Warn,
            desc: "type of `self` parameter is already by default `Self`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTING_NULL",
            default_level: Deny,
            desc: "transmutes from a null pointer to a reference, which is undefined behavior",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME",
            default_level: Deny,
            desc: "detects usage of `#![cfg_attr(..., crate_type/crate_name = \"...\")]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #91632 <https://github.com/rust-lang/rust/issues/91632>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::TO_DIGIT_IS_SOME",
            default_level: Warn,
            desc: "`char.is_digit()` is clearer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INLINE_NO_SANITIZE",
            default_level: Warn,
            desc: "detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ASSERTIONS_ON_CONSTANTS",
            default_level: Warn,
            desc: "`assert!(true)` / `assert!(false)` will be optimized out by the compiler, and should probably be replaced by a `panic!()` or `unreachable!()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INHERENT_TO_STRING_SHADOW_DISPLAY",
            default_level: Deny,
            desc: "type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::EXTRA_UNUSED_LIFETIMES",
            default_level: Warn,
            desc: "unused lifetimes in function definitions",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_LAZY_EVALUATIONS",
            default_level: Warn,
            desc: "using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DECLARE_INTERIOR_MUTABLE_CONST",
            default_level: Warn,
            desc: "declaring `const` with interior mutability",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CRATE_IN_MACRO_DEF",
            default_level: Warn,
            desc: "using `crate` in a macro definition",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DROP_NON_DROP",
            default_level: Warn,
            desc: "call to `std::mem::drop` with a value which does not implement `Drop`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::BOX_COLLECTION",
            default_level: Warn,
            desc: "usage of `Box<Vec<T>>`, vector elements are already on the heap",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INVALID_TYPE_PARAM_DEFAULT",
            default_level: Deny,
            desc: "type parameter default erroneously allowed in invalid location",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #36887 <https://github.com/rust-lang/rust/issues/36887>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::BIND_INSTEAD_OF_MAP",
            default_level: Warn,
            desc: "using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "DEAD_CODE",
            default_level: Warn,
            desc: "detect unused, unexported items",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INCONSISTENT_DIGIT_GROUPING",
            default_level: Warn,
            desc: "integer literals with digits grouped inconsistently",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::EQ_OP",
            default_level: Deny,
            desc: "equal operands on both sides of a comparison or bitwise combination (e.g., `x == x`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RETURN_WITH_QUESTION_MARK",
            default_level: Warn,
            desc: "using a return statement like `return Err(expr)?;` where removing it would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ENUM_CONSTRUCTOR",
            default_level: Warn,
            desc: "casts from an enum tuple constructor to an integer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_REM_EUCLID",
            default_level: Warn,
            desc: "manually reimplementing `rem_euclid`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NTH",
            default_level: Warn,
            desc: "using `.iter().nth()` on a standard library type with O(1) element access",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SEEK_FROM_CURRENT",
            default_level: Warn,
            desc: "use dedicated method for seek from current position",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "IMPLIED_BOUNDS_ENTAILMENT",
            default_level: Deny,
            desc: "impl method assumes more implied bounds than its corresponding trait method",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #105572 <https://github.com/rust-lang/rust/issues/105572>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNDERSCORE_FUTURE",
            default_level: Warn,
            desc: "non-binding `let` on a future",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_UNWRAP_OR",
            default_level: Warn,
            desc: "finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NAMED_ASM_LABELS",
            default_level: Deny,
            desc: "named labels in inline assembly",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::DUPLICATE_MOD",
            default_level: Warn,
            desc: "file loaded as module multiple times",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::INHERENT_TO_STRING",
            default_level: Warn,
            desc: "type implements inherent method `to_string()`, but should instead implement the `Display` trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_LIFETIMES",
            default_level: Warn,
            desc: "using explicit lifetimes for references in function arguments when elision rules would allow omitting them",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SINGLE_CHAR_ADD_STR",
            default_level: Warn,
            desc: "`push_str()` or `insert_str()` used with a single-character string literal as parameter",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_UPDATE",
            default_level: Warn,
            desc: "using `Foo { ..base }` when there are no missing fields",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNINHABITED_STATIC",
            default_level: Warn,
            desc: "uninhabited static",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #74840 <https://github.com/rust-lang/rust/issues/74840>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_ELSE_IF",
            default_level: Warn,
            desc: "nested `else`-`if` expressions that can be collapsed (e.g., `else { if x { ... } }`)",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_WHILE_LET_SOME",
            default_level: Warn,
            desc: "checking for emptiness of a `Vec` in the loop condition and popping an element in the body",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_OP_ASSIGN_IMPL",
            default_level: Warn,
            desc: "suspicious use of operators in impl of OpAssign trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SWAP_PTR_TO_REF",
            default_level: Warn,
            desc: "call to `mem::swap` using pointer derived references",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MISNAMED_GETTERS",
            default_level: Warn,
            desc: "getter method returning the wrong field",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OBFUSCATED_IF_ELSE",
            default_level: Warn,
            desc: "use of `.then_some(..).unwrap_or(..)` can be written more clearly with `if .. else ..`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_MAP_OR_INTO_OPTION",
            default_level: Warn,
            desc: "using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_UNSAFE",
            default_level: Warn,
            desc: "unnecessary use of an `unsafe` block",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LET_WITH_TYPE_UNDERSCORE",
            default_level: Warn,
            desc: "unneeded underscore type (`_`) in a variable declaration",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DURATION_SUBSEC",
            default_level: Warn,
            desc: "checks for calculation of subsecond microseconds or milliseconds",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_RETURN",
            default_level: Warn,
            desc: "using a return statement like `return expr;` where an expression would suffice",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WARNINGS",
            default_level: Warn,
            desc: "mass-change the level for lints which produce warnings",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_SLICE_DIFFERENT_SIZES",
            default_level: Deny,
            desc: "casting using `as` between raw pointers to slices of types with different sizes",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::ITER_KV_MAP",
            default_level: Warn,
            desc: "iterating on map using `iter` when `keys` or `values` would do",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NTH_ZERO",
            default_level: Warn,
            desc: "replace `iter.nth(0)` with `iter.next()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ALMOST_SWAPPED",
            default_level: Deny,
            desc: "`foo = bar; bar = foo` sequence",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::UNSOUND_COLLECTION_TRANSMUTE",
            default_level: Deny,
            desc: "transmute between collections of layout-incompatible types",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "OPAQUE_HIDDEN_INFERRED_BOUND",
            default_level: Warn,
            desc: "detects the use of nested `impl Trait` types in associated type bounds that are not general enough",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ELSE_FORMATTING",
            default_level: Warn,
            desc: "suspicious formatting of `else`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::LET_UNDERSCORE_LOCK",
            default_level: Deny,
            desc: "non-binding `let` on a synchronization lock",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_STRIP",
            default_level: Warn,
            desc: "suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_MATCH",
            default_level: Warn,
            desc: "Nested `match` or `if let` expressions where the patterns may be \"collapsed\" together.",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::PRINT_WITH_NEWLINE",
            default_level: Warn,
            desc: "using `print!()` with a format string that ends in a single newline",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "REFINING_IMPL_TRAIT",
            default_level: Warn,
            desc: "impl trait in impl method signature does not match trait method signature",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITER_NEXT_SLICE",
            default_level: Warn,
            desc: "using `.iter().next()` on a sliced array, which can be shortened to just `.get()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNNECESSARY_MUT_PASSED",
            default_level: Warn,
            desc: "an argument passed as a mutable reference although the callee only demands an immutable reference",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COLLAPSIBLE_IF",
            default_level: Warn,
            desc: "nested `if`s that can be collapsed (e.g., `if x { if y { ... } }`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSED_ENUMERATE_INDEX",
            default_level: Warn,
            desc: "using `.enumerate()` and immediately dropping the index",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MIXED_CASE_HEX_LITERALS",
            default_level: Warn,
            desc: "hex literals whose letter digits are not consistently upper- or lowercased",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_LATE_INIT",
            default_level: Warn,
            desc: "late initializations that can be replaced by a `let` statement with an initializer",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SIZE_OF_REF",
            default_level: Warn,
            desc: "Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::SUSPICIOUS_ARITHMETIC_IMPL",
            default_level: Warn,
            desc: "suspicious use of operators in impl of arithmetic trait",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "WHILE_TRUE",
            default_level: Warn,
            desc: "suggest using `loop { }` instead of `while true { }`",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNEXPECTED_CFGS",
            default_level: Warn,
            desc: "detects unexpected names and values in `#[cfg]` conditions",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_LARGE_ERR",
            default_level: Warn,
            desc: "function returning `Result` with large `Err` type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NO_EFFECT_REPLACE",
            default_level: Warn,
            desc: "replace with no effect",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_MAP_OR_NONE",
            default_level: Warn,
            desc: "using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ASM_SUB_REGISTER",
            default_level: Warn,
            desc: "using only a subset of a register for inline asm inputs",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::REDUNDANT_COMPARISONS",
            default_level: Deny,
            desc: "double comparisons where one of them can be removed",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::LET_AND_RETURN",
            default_level: Warn,
            desc: "creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "ILLEGAL_FLOATING_POINT_LITERAL_PATTERN",
            default_level: Warn,
            desc: "floating-point literals cannot be used in patterns",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #41620 <https://github.com/rust-lang/rust/issues/41620>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::CAST_ENUM_TRUNCATION",
            default_level: Warn,
            desc: "casts from an enum type to an integral type which will truncate the value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_FILTER_MAP",
            default_level: Warn,
            desc: "filtering `Option` for `Some` then force-unwrapping, which can be one type-safe operation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SWAP",
            default_level: Warn,
            desc: "manual swap of two variables",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "MIXED_SCRIPT_CONFUSABLES",
            default_level: Warn,
            desc: "detects Unicode scripts whose mixed script confusables codepoints are solely used",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "RENAMED_AND_REMOVED_LINTS",
            default_level: Warn,
            desc: "lints that have been renamed or removed",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_MATCH",
            default_level: Warn,
            desc: "`match` or match-like `if let` that are unnecessary",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "UNUSED_ATTRIBUTES",
            default_level: Warn,
            desc: "detects attributes that were not used by the compiler",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ALMOST_COMPLETE_RANGE",
            default_level: Warn,
            desc: "almost complete range",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::UNUSUAL_BYTE_GROUPINGS",
            default_level: Warn,
            desc: "binary or hex literals that aren't grouped by four",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OPTION_AS_REF_DEREF",
            default_level: Warn,
            desc: "using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MUTABLE_KEY_TYPE",
            default_level: Warn,
            desc: "Check for mutable `Map`/`Set` key type",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "FORBIDDEN_LINT_GROUPS",
            default_level: Warn,
            desc: "applying forbid to lint-groups",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #81670 <https://github.com/rust-lang/rust/issues/81670>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::FORMAT_IN_FORMAT_ARGS",
            default_level: Warn,
            desc: "`format!` used in a macro that does formatting",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_FIND",
            default_level: Warn,
            desc: "manual implementation of `Iterator::find`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MANUAL_SLICE_SIZE_CALCULATION",
            default_level: Warn,
            desc: "manual slice size calculation",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DOUBLE_NEG",
            default_level: Warn,
            desc: "`--x`, which is a double negation of `x` and not a pre-decrement as in C/C++",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::DEREF_ADDROF",
            default_level: Warn,
            desc: "use of `*&` or `*&mut` in an expression",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE",
            default_level: Warn,
            desc: "`[u8]` or `str` used in a packed struct with `derive`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #107457 <https://github.com/rust-lang/rust/issues/107457>",
                    reason: FutureReleaseErrorReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::RESULT_UNIT_ERR",
            default_level: Warn,
            desc: "public function returning `Result` with an `Err` type of `()`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_OPTION_TAKE",
            default_level: Warn,
            desc: "using `.as_ref().take()` on a temporary value",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::OVERFLOW_CHECK_CONDITIONAL",
            default_level: Warn,
            desc: "overflow checks inspired by C which are likely to panic",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::MODULE_INCEPTION",
            default_level: Warn,
            desc: "modules that have the same name as their parent module",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::IMPOSSIBLE_COMPARISONS",
            default_level: Deny,
            desc: "double comparisons that will never evaluate to `true`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "UNNAMEABLE_TEST_ITEMS",
            default_level: Warn,
            desc: "detects an item that cannot be named being marked as `#[test_case]`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::ITERATOR_STEP_BY_ZERO",
            default_level: Deny,
            desc: "using `Iterator::step_by(0)`, which will panic at runtime",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::VEC_RESIZE_TO_ZERO",
            default_level: Deny,
            desc: "emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Deny,
    LintId {
        lint: Lint {
            name: "clippy::NEEDLESS_BOOL_ASSIGN",
            default_level: Warn,
            desc: "setting the same boolean variable in both branches of an if-statement",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::TRANSMUTE_NUM_TO_BYTES",
            default_level: Warn,
            desc: "transmutes from a number to an array of `u8`",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "INDIRECT_STRUCTURAL_MATCH",
            default_level: Warn,
            desc: "constant used in pattern contains value of non-structural-match type in a field or a variant",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: Some(
                FutureIncompatibleInfo {
                    reference: "issue #62411 <https://github.com/rust-lang/rust/issues/62411>",
                    reason: FutureReleaseErrorDontReportInDeps,
                    explain_reason: true,
                },
            ),
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "CONFUSABLE_IDENTS",
            default_level: Warn,
            desc: "detects visually confusable pairs between identifiers",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: true,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "NON_SHORTHAND_FIELD_PATTERNS",
            default_level: Warn,
            desc: "using `Struct { x: x }` instead of `Struct { x }` in a pattern",
            edition_lint_opts: None,
            report_in_external_macro: false,
            future_incompatible: None,
            is_loaded: false,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
    LintId {
        lint: Lint {
            name: "clippy::COMPARISON_TO_EMPTY",
            default_level: Warn,
            desc: "checking `x == \"\"` or `x == []` (or similar) when `.is_empty()` could be used instead",
            edition_lint_opts: None,
            report_in_external_macro: true,
            future_incompatible: None,
            is_loaded: true,
            feature_gate: None,
            crate_level_only: false,
        },
    }: Warn,
}

full stdout:


FAILURES:
    tests/ui/exit2.rs

test result: FAIL. 1 failed;



command did not execute successfully: cd "/home/queen/git/rust" && env -u MAKEFLAGS -u MFLAGS AR_x86_64_unknown_linux_gnu="ar" CARGO_INCREMENTAL="0" CARGO_PROFILE_RELEASE_DEBUG="0" CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS="false" CARGO_PROFILE_RELEASE_OVERFLOW_CHECKS="false" CARGO_TARGET_DIR="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools" CC_x86_64_unknown_linux_gnu="cc" CFG_COMPILER_HOST_TRIPLE="x86_64-unknown-linux-gnu" CFG_RELEASE="1.76.0-dev" CFG_RELEASE_CHANNEL="dev" CFG_RELEASE_NUM="1.76.0" CFG_VERSION="1.76.0-dev" CFLAGS_x86_64_unknown_linux_gnu="-ffunction-sections -fdata-sections -fPIC -m64" CXXFLAGS_x86_64_unknown_linux_gnu="-ffunction-sections -fdata-sections -fPIC -m64" CXX_x86_64_unknown_linux_gnu="c++" DOC_RUST_LANG_ORG_CHANNEL="https://doc.rust-lang.org/nightly" HOST_LIBS="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release" LD_LIBRARY_PATH="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib" LIBC_CHECK_CFG="1" LIBRARY_PATH="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/ci-llvm/lib" LZMA_API_STATIC="1" RANLIB_x86_64_unknown_linux_gnu="ar s" REAL_LIBRARY_PATH_VAR="LD_LIBRARY_PATH" RUSTBUILD_NATIVE_DIR="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/native" RUSTC="/home/queen/git/rust/build/bootstrap/debug/rustc" RUSTC_BOOTSTRAP="1" RUSTC_BREAK_ON_ICE="1" RUSTC_ERROR_METADATA_DST="/home/queen/git/rust/build/tmp/extended-error-metadata" RUSTC_HOST_FLAGS="-Zunstable-options --check-cfg=cfg(bootstrap)" RUSTC_INSTALL_BINDIR="bin" RUSTC_LIBDIR="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib" RUSTC_LIB_PATH="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib" RUSTC_LINT_FLAGS="-Wrust_2018_idioms -Wunused_lifetimes -Wsemicolon_in_expressions_from_macros -Dwarnings" RUSTC_REAL="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc" RUSTC_SNAPSHOT="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc" RUSTC_SNAPSHOT_LIBDIR="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib" RUSTC_STAGE="1" RUSTC_SYSROOT="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1" RUSTC_TEST_SUITE="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc" RUSTC_TLS_MODEL_INITIAL_EXEC="1" RUSTC_VERBOSE="0" RUSTDOC="/home/queen/git/rust/build/bootstrap/debug/rustdoc" RUSTDOCFLAGS="--cfg=windows_raw_dylib -Csymbol-mangling-version=v0 -Zunstable-options --check-cfg=cfg(bootstrap,values()) --check-cfg=cfg(parallel_compiler,values()) --check-cfg=cfg(no_btreemap_remove_entry,values()) --check-cfg=cfg(crossbeam_loom,values()) --check-cfg=cfg(span_locations,values()) --check-cfg=cfg(rustix_use_libc,values()) --check-cfg=cfg(emulate_second_only_system,values()) --check-cfg=cfg(windows_raw_dylib,values()) -Dwarnings -Wrustdoc::invalid_codeblock_attributes --crate-version 1.76.0-dev" RUSTDOC_LIBDIR="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib" RUSTDOC_REAL="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustdoc" RUSTFLAGS="--cfg=windows_raw_dylib -Csymbol-mangling-version=v0 -Zunstable-options --check-cfg=cfg(bootstrap,values()) --check-cfg=cfg(parallel_compiler,values()) --check-cfg=cfg(no_btreemap_remove_entry,values()) --check-cfg=cfg(crossbeam_loom,values()) --check-cfg=cfg(span_locations,values()) --check-cfg=cfg(rustix_use_libc,values()) --check-cfg=cfg(emulate_second_only_system,values()) --check-cfg=cfg(windows_raw_dylib,values()) -Zmacro-backtrace -Clink-args=-Wl,-z,origin -Clink-args=-Wl,-rpath,$ORIGIN/../lib -Csplit-debuginfo=off -Cllvm-args=-import-instr-limit=10 -Zunstable-options" RUST_TEST_THREADS="12" SYSROOT="/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage1" __CARGO_DEFAULT_LIB_METADATA="devtool-rustc" "/home/queen/git/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo" "test" "--target" "x86_64-unknown-linux-gnu" "--release" "-Zcheck-cfg" "-Zbinary-dep-depinfo" "-j" "12" "--manifest-path" "/home/queen/git/rust/src/tools/clippy/Cargo.toml" "--" "--quiet"
expected success, got: exit status: 101

stdout ----

stderr ----



